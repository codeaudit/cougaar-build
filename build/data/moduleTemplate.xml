<?xml version="1.0" encoding="ASCII" standalone="yes" ?> 
<!DOCTYPE ant1.5 SYSTEM "ant-1.5.dtd">
<!-- comment out the dtd reference if you want to avoid ant validating -->
<!-- For simplest use, build.xml and module.properties should be in the
module base directory (e.g. with src, doc, etc).
-->
<!--
  Template compiling is performed by searching for "percent { VAR }" patterns and
  replacing the matched string with:
	Name  name of the module.
	BEGIN	all lines upto and including this one are skipped.
 -->

<!-- %{BEGIN} Everything after this line will be included in the generated foo.xml files -->
<!-- autobuild-generated ANT script -->
<!-- The source for this file is in build/data/moduleTemplate.xml -->

<!-- autobuild might execute this with something like:
  ant -DTARGETBASE=/tmp/target -DMODSOURCE=/tmp/cougaar/latest/src/util -DTMP=/tmp/tmpdir
or even without installing it in the module directory:
  ant -b /tmp/cougaar/latest/src/build/data/module.xml -Dbasedir=/tmp/couagaar/latest/src/util ...

If someone wanted to recompile a piece from sources (e.g. from the cougaar-dev package), 
then the default values for these guys are functional:
  TARGETBASE=..
  MODSOURCE=.
  TMPDIR=./tmp

A core developer working with a different arrangement would probably make the 
above settings point directly as specific directories. e.g.:
  TARGETBASE=$COUGAAR_INSTALL_PATH
  MODSOURCE=$COUGAAR_INSTALL_PATH/module-name
 -->

<project name="%{Name}" default="compile">
    <property name="module" value="%{Name}"/>
    <property name="moduleUp" value="%{PrettyName}"/>

    <!-- ================ Directories ================ -->

    <!-- TARGETBASE is where we will install files -->
    <property name="TARGETBASE" value=".." />
    <property file="${TARGETBASE}/global.properties" />

    <!-- MODSOURCE is where the sources are -->
    <property name="MODSOURCE" value="." /> 
    <property file="${MODSOURCE}/module.properties" />  <!-- per-module properties file! -->

    <!-- TMP is a temporary location for compiling, zipping, etc -->
    <property name="TMP" value="${MODSOURCE}/tmp" />

    <!-- These are target base directories -->
    <property name="target.lib" value="${TARGETBASE}/lib" />
    <property name="sys" value="${TARGETBASE}/sys" />
    <!-- Single module Javadocs go in doc/javadoc.  Not used if is.unified.javadoc -->
    <property name="javadoc.target" value="${TARGETBASE}/${module}/doc/api" />
    <!-- Target tree for modules which contribute to the unified javadoc  -->
    <property name="unified.target" value="${TARGETBASE}/unified" />    

    <!-- These are source base directories -->
    <property name="src" value="${MODSOURCE}/src" />
    <property name="lib" value="${MODSOURCE}/lib" />
    <property name="regress" value="${MODSOURCE}/regress" />
    <property name="examples" value="${MODSOURCE}/examples" />
    <property name="bin" value="${MODSOURCE}/bin" />
    <property name="doc" value="${MODSOURCE}/doc" />
    <property name="data" value="${MODSOURCE}/data" />
    <property name="configs" value="${MODSOURCE}/configs" />
    
    <!-- These are temporary base directories. -->
    <property name="examples.build" value="${TMP}/examples" />
    <property name="build" value="${TMP}/classes" />
    <property name="testbuild" value="${TMP}/regress" />

    <!-- Set paths for use in creating zip files -->
    <property name="zipbase" value="${TMP}/zip"/>
    
    <!-- ================ Parameters ================ -->
    <property name="javadoc.packages" value="%{javadoc.packages}"/>
    <property name="rmicfiles.list" value="%{rmifiles.list}"/>
    <property name="libjars.list" value="%{libjars.list}"/>
    <property name="sysjars.list" value="%{sysjars.list}"/>
    <!-- <property name="locjars.list" value="%{locjars.list}"/> -->
    
    <!-- ================ Tool options ================ -->

    <!-- Note that a popular alternative build.compiler is 'jikes' -->
    <property name="build.compiler" value="modern"/>
    <!-- Include extra debug info in compilations -->
    <property name="build.compiler.debug" value="on"/>
    <!-- Include deprecation warnings -->
    <property name="build.compiler.deprecation" value="off"/>
    <!-- Don't exclude basic debug info -->
    <property name="build.compiler.optimize" value="off"/>

    <!-- ================ Classpaths ================ -->

    <!-- What are the dependencies of this module at compile time -->
    <path id="compile.classpath">
      <filelist dir="${target.lib}" files="${libjars.list}"/>
      <filelist dir="${sys}" files="${sysjars.list}"/>
      <filelist dir="${sys}" files="${locjars.list}"/>
    </path>
    
    <!-- Build up classpath for junit.jar and classes when running tests -->
    <path id="junit.classpath">
      <path location="${build}" />
      <path location="${testbuild}" />
      <path refid="compile.classpath"/>
      <pathelement path="${java.class.path}"/>
      <pathelement path="${jikes.class.path}"/>
    </path> 

    <!-- Define paths for doing codegen stuff -->
    <path id="codegen.path">
      <pathelement path="${target.lib}/build.jar"/>
      <path refid="compile.classpath"/>
    </path>
    <property name="genpath" refid="codegen.path"/>

    <!-- ================ Targets ================ -->

    <!-- ========================================================== -->
    <!-- Define dirs for copying files into for zipping -->
    <!-- All based on property zipbase -->
    <!-- ========================================================== -->
    <target name="set-zip-dirs">
      <property name="zipdir.javadocs" value="${zipbase}/${module}/doc/api"/>
      <property name="zipdir.src" value="${zipbase}/${module}/src"/>
      <property name="zipdir.bin" value="${zipbase}/${module}/bin"/>
      <property name="zipdir.data" value="${zipbase}/${module}/data"/>
      <property name="zipdir.configs" value="${zipbase}/${module}/configs"/>
      <property name="zipdir.doc" value="${zipbase}/${module}/doc"/>
      <property name="zipdir.regress" value="${zipbase}/${module}/regress"/>
      <property name="zipdir.examples" value="${zipbase}/${module}/examples"/>
      <property name="zipdir.lib" value="${zipbase}/lib"/>
    </target>
    
    <!-- ========================================================== -->
    <!-- Test for presence of JUnit. Skip JUnit targets if not found. -->
    <!-- Also skip if there is no regress directory -->	
    <!-- ========================================================== -->
    <target name="junit" depends="prepare" if="has.Regress">
      <available property="junit.present" classname="junit.framework.TestCase" classpathref="junit.classpath"/>
    </target>

    <!-- ========================================================== -->
    <!-- Run RMIC on built classes			                -->
    <!-- ========================================================== -->
    <!-- Mikes build script does: -->
    <!-- fileset of all files named *Impl.java that contain UnicastRemoteObject-->
    <!-- command is rmic -g -v1.2 -d destdir -classpath destdir:restofclasspath listoffiles -->
    <!-- remove dependency on prepare-rmic cause it is currently broken -->
    <target name="rmic-source" depends="prepare"
	    unless="rmic.notRequired" if="has.build">
      <rmic base="${build}" stubversion="1.2" verify="true"
	    debug="${build.compiler.debug}"
	    includes="${rmicfiles.list}"> 
	<classpath>
	  <path location="${build}" />
	  <path refid="compile.classpath"/>
	</classpath>
      </rmic>	    
    </target>

    <!-- ============================================================= -->
    <!-- Run the code generators                            	-->
    <!-- ============================================================= -->
    <target name="defrunner" depends="prepare-defrunner, prepare" unless="defrunner.notRequired" if="have.buildjar">
      <apply executable="java"
	     parallel="false"
	     failonerror="false" >
	<arg line="-classpath ${genpath} org.cougaar.tools.build.DefRunner" />
	<fileset dir="${src}" >
	  <include name="**/*.def" />
	</fileset>
      </apply>
    </target>
    
    <!-- ============================================================= -->
    <!-- Clean up generated code                             	-->
    <!-- ============================================================= -->
    <target name="clean-gencode" depends="prepare, prepare-defrunner" description="Delete generated code" if="have.buildjar">
      <apply executable="java"
	     parallel="false"
	     failonerror="false" >
	<arg line="-classpath ${genpath} org.cougaar.tools.build.DefCleaner" />
	<fileset dir="${src}" >
	  <include name="**/*.gen" />
	</fileset>
      </apply>
    </target>
    
    <!-- ========================================================== -->
    <!-- Compiles the example Code			                -->
    <!-- ========================================================== -->	
    <target name="compile-examples" depends="prepare, compile" description="Compiles the example Code" if="has.examples">
      <mkdir dir="${examples.build}" />
      <!-- source=1.4 required to allow asserts -->
      <javac srcdir="${examples}"
	     destdir="${examples.build}"
	     includeAntRuntime="no"
	     source="1.4"
	     debug="${build.compiler.debug}"
	     optimize="${build.compiler.optimize}"
	     deprecation="${build.compiler.deprecation}">
	<classpath>
	  <path location="${build}" />
	  <path refid="compile.classpath" />
	</classpath>
      </javac>
      <!-- Copy any gifs and HTML help files over as well -->
      <copy todir="${examples.build}" >
	<fileset dir="${examples}">
	  <patternset id="images.and.html.and.def"/>
	</fileset>
      </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Clean up built example code     				    -->
    <!-- ====================================================================== -->	
    <target name="clean-examples" description="Delete compiled example code">
      <delete dir="${examples.build}" />
    </target>

    <!-- ============================================================= -->
    <!-- Prepares all the build directories		               	   -->
    <!-- ============================================================= -->
    <target name="prepare">
      <available property="has.examples" file="${examples}"/>
      <available property="has.build" file="${build}"/>
      <available property="has.src" file="${src}"/>
      <available property="has.bin" file="${bin}"/>
      <available property="has.data" file="${data}"/>
      <available property="has.configs" file="${configs}"/>
      <available property="has.doc" file="${doc}"/>
      <available property="has.Regress" file="${regress}"/>
      
      <!-- Create the timestamp -->
      <tstamp/>
    </target>
    
    <target name="prepare-defrunner" depends="prepare"
	    if="has.src">
      
      <!-- Need build.jar -->
      <available property="have.buildjar" file="${target.lib}/build.jar"/>
      
      <!-- Check if defrunner is required -->
      <uptodate property="defrunner.notRequired">
	<srcfiles dir="${src}" includes="**/*.def"/>
	<!-- If file.gen newer than .def, don't rerun -->
	<mapper type="glob" from="*.def" to="${src}/*.gen"/>
	<!-- FIXME: even better: if above is true AND every file
	listed in .gen exists and is newer than .def, dont
	rerun -->
	<!-- Even better: parse out the @generated tag and
	ensure that the date is more recent than on the listed .def file -->
      </uptodate>
    </target>
    
    <!-- FIXME: The identity mapper is not right!!! -->
    <!-- FIXME: In the meantime, do not use this!  -->
    <target name="prepare-rmic" depends="prepare" if="has.build">
      <!-- Check if rmic is required -->
      <uptodate property="rmic.notRequired">
	<srcfiles dir="${build}"
		  includes="${rmicfiles.list}"/>
	<!-- FIXME: What am I looking for here? -->
	<mapper type="identity"/>
      </uptodate>		
    </target>

    <!-- ========================================================== -->
    <!-- Compiles the Module Code			                -->
    <!-- ========================================================== -->	
    <target name="compile" depends="prepare, defrunner, really-compile, rmic-source"
	    description="Compiles the Code"> </target>

    <!-- This really does the compilation. The above just calls this -->
    <target name="really-compile" depends="prepare, defrunner" if="has.src">
      <mkdir dir="${build}" />
      <available property="has.build" file="${build}"/>
      <!-- source=1.4 required for asserts -->
      <javac srcdir="${src}" destdir="${build}"
	     source="1.4"
	     includeAntRuntime="no"
	     debug="${build.compiler.debug}"
	     optimize="${build.compiler.optimize}"
	     deprecation="${build.compiler.deprecation}">
	<classpath>
	  <path refid="compile.classpath" />
	</classpath>
      </javac>
      <!-- Copy any gifs and HTML help files over as well -->
      <copy todir="${build}" >
	<fileset dir="${src}">
	  <patternset id="images.and.html.and.def">
	    <include name="**/*.def"/>
	    <include name="**/*.gif"/>
	    <include name="**/*.html"/>
	    <include name="**/*.htm"/>
	    <include name="**/*.jpg"/>
	    <include name="**/*.bmp"/>
	    <include name="**/*.png"/>
	  </patternset>
	</fileset>
      </copy>
    </target>

    <!-- ========================================================== -->
    <!-- Compile EVERYTHING			                -->
    <!-- ========================================================== -->	
    <target name="compile-all" depends="compile, compile-tests, compile-examples" description="Compile all Module code plus examples and unit testing code" />

    <!-- ========================================================== -->
    <!-- Clean up all built code                    	-->
    <!-- ========================================================== -->
    <target name="clean" depends="clean-gencode" description="Delete compiled code">
      <delete dir="${build}" />
      <delete>
	<fileset dir="${target.lib}" includes="**/${module}.jar" />
      </delete>
    </target>

    <!-- ====================================================================== -->
    <!-- Compile regression test code     				          -->
    <!-- ====================================================================== -->	
    <target name="compile-tests" depends="prepare, junit, compile" description="Compile unit tests" if="junit.present"> 
      <mkdir dir="${testbuild}" />
      <javac srcdir="${regress}" destdir="${testbuild}" source="1.4"
	     deprecation="${build.compiler.deprecation}"
	     optimize="off"
	     debug="on">
	<classpath>
	  <path refid="junit.classpath"/>
	</classpath>
      </javac>
    </target>

    <!-- ====================================================================== -->
    <!-- Clean up built regress test code     				    -->
    <!-- ====================================================================== -->	
    <target name="clean-tests" description="Delete compiled junit code">
      <delete dir="${testbuild}" />
    </target>

    <!-- ====================================================================== -->
    <!-- Run the regression tests     				          -->
    <!-- ====================================================================== -->
    <target name="test-module" depends="compile-all" if="junit.present" description="Run JUnit tests for this module">
      <junit printsummary="yes" fork="yes" dir="">
	<classpath>
	  <pathelement location="${testbuild}" />
	  <path refid="junit.classpath" />
	</classpath>
	<formatter type="plain" />
	<batchtest>				
	  <fileset dir="${testbuild}">
	    <include name="**/*Test.class" />
	  </fileset>  				
	</batchtest> 
	<!--			<test name="Regress" /> -->
      </junit>
    </target>

    <!-- ====================================================================== -->
    <!-- Create a Jar for the module     				          -->
    <!-- ====================================================================== -->	
    <target name="dist-module" depends="compile, clean-tests, clean-examples" description="Jars the module" if="has.build">
      <jar jarfile="${target.lib}/${module}-${DSTAMP}.jar" basedir="${build}" />
      <exec dir="${target.lib}" executable="ln" os="Linux">
	<arg line=" -s ${module}-${DSTAMP}.jar ${module}.jar" />
      </exec>
    </target>
    

    <!-- ====================================================================== -->
    <!-- Clean up the JavaDocs for the module			          -->
    <!-- ====================================================================== -->	
    <target name="clean-docs" description="Delete javadocs">
      <delete dir="${javadoc.target}" />
    </target>
    
    <!-- ====================================================================== -->
    <!-- Generates the JavaDocs for the one module			          -->
    <!-- ====================================================================== -->	
    <target name="javadocs" depends="prepare, defrunner, clean-docs" description="Create javadocs for this module" if="has.src">
      <mkdir dir="${javadoc.target}"/>
      <javadoc packagenames="${javadoc.packages}"
	       sourcepath="${src}"
	       destdir="${javadoc.target}"
	       author="true"
	       version="true"
	       doclet="org.cougaar.tools.javadoc.CougaarDoclet"
	       docletpath="${target.lib}/build.jar"
	       additionalparam="-breakiterator -source 1.4 -tagletpath ${target.lib}/build.jar -taglet org.cougaar.tools.javadoc.PropertyTaglet -taglet org.cougaar.tools.javadoc.NoteTaglet -taglet org.cougaar.tools.javadoc.ToDoTaglet -taglet org.cougaar.tools.javadoc.GeneratedTaglet"
	       windowtitle="${module} API"
	       doctitle="${module} API"
	       bottom="Copyright &#169; 2002 by BBNT Solutions LLC, all rights reserved.">
	<classpath refid="compile.classpath" />
      </javadoc>
    </target>

    <!-- ====================================================================== -->
    <!-- Zip up the built JavaDocs				          -->
    <!-- ====================================================================== -->	
    <target name="zip-docs" depends="javadocs, set-zip-dirs, zip-copy-docs" description="Zip up built javadocs" if="has.src">
      <zip zipfile="../${module}-api.zip" basedir="${zipbase}" />
      <delete dir="${zipdir.javadocs}"/>
    </target>
    <target name="zip-copy-docs" depends="javadocs, set-zip-dirs" if="has.src">
      <mkdir dir="${zipdir.javadocs}"/>
      <copy todir="${zipdir.javadocs}">
	<fileset dir="${javadoc.target}" />
      </copy>
    </target>
    

    <!-- ====================================================================== -->
    <!-- Zip up the source: src, examples, regress		          -->
    <!-- ====================================================================== -->	
    <target name="zip-dev" depends="clean-gencode, set-zip-dirs, zip-prep, zip-copy-src, zip-copy-ex, zip-copy-test"
	    description="Create -dev zip file">
      <zip zipfile="../${module}-dev.zip" basedir="${zipbase}" />
      <delete dir="${zipdir.src}"/>
      <delete dir="${zipdir.examples}"/>
      <delete dir="${zipdir.regress}"/>
    </target>
    <target name="zip-prep">
      <delete dir="${zipbase}"/>
    </target>
    <target name="zip-copy-src" depends="set-zip-dirs, prepare" if="has.src">
      <mkdir dir="${zipdir.src}"/>
      <copy todir="${zipdir.src}">
	<!-- skip CVS, #, ~, .class -->
	<fileset dir="${src}">
	  <patternset id="real.sources">
	    <exclude name="**/CVS"/>
	    <exclude name="**/*#"/>
	    <exclude name="**/*~"/>
	    <exclude name="**/*.class"/>
	    <exclude name="**/.cvsignore"/>
	  </patternset>
	</fileset>
      </copy>
    </target>
    <target name="zip-copy-ex" depends="set-zip-dirs, prepare" if="has.examples">
      <mkdir dir="${zipdir.examples}"/>
      <copy todir="${zipdir.examples}">
	<fileset dir="${examples}">
	  <patternset id="real.sources"/>
	</fileset>
      </copy>
    </target>
    <target name="zip-copy-test" depends="set-zip-dirs, junit" if="has.Regress">
      <mkdir dir="${zipdir.regress}"/>
      <copy todir="${zipdir.regress}">
	<fileset dir="${regress}">
	  <patternset id="real.sources"/>
	</fileset>
      </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Zip up the runtime: bin, data, doc (less javadocs), plus the jar file -->
    <!-- ====================================================================== -->	
    <target name="zip-runtime" depends="clean-docs, compile, dist-module,
	    set-zip-dirs, zip-prep, zip-copy-bin, zip-copy-data, zip-copy-configs, zip-copy-doc" description="Create runtime zip file">
      <copy todir="${zipdir.lib}">
	<fileset dir="${target.lib}" includes="${module}*.jar"/>
      </copy>
      <zip zipfile="../${module}.zip" basedir="${zipbase}"/>
      <delete dir="${zipdir.lib}"/>
      <delete dir="${zipdir.bin}"/>
      <delete dir="${zipdir.data}"/>
      <delete dir="${zipdir.configs}"/>
      <delete dir="${zipdir.doc}"/>
    </target>
    <target name="zip-copy-bin" depends="prepare, set-zip-dirs" if="has.bin">
      <mkdir dir="${zipdir.bin}"/>
      <copy todir="${zipdir.bin}">
	<fileset dir="${bin}" />
      </copy>
    </target>
    <target name="zip-copy-data" depends="prepare, set-zip-dirs" if="has.data">
      <mkdir dir="${zipdir.data}"/>
      <copy todir="${zipdir.data}">
	<fileset dir="${data}" />
      </copy>
    </target>
    <target name="zip-copy-configs" depends="prepare, set-zip-dirs" if="has.configs">
      <mkdir dir="${zipdir.configs}"/>
      <copy todir="${zipdir.configs}">
	<fileset dir="${configs}" />
      </copy>
    </target>
    <target name="zip-copy-doc" depends="prepare, set-zip-dirs" if="has.doc">
      <mkdir dir="${zipdir.doc}"/>
      <copy todir="${zipdir.doc}">
	<fileset dir="${doc}" />
      </copy>
    </target>
  </project>
