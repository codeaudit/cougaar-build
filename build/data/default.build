# COUGAAR release build driver for the HEAD (currently 11.4)
# 
# !!! THIS IS ONLY AN EXAMPLE !!!
#
# Note that this build script driver is unlikely to do anything useful
# on any machine/repository other than the original build script
# development machine.  While is is very close to what another site
# might use, you are unlikely to be happy with the results until
# you've made appropriate changes to the below.
#

product.name=cougaar

# where to put temporary files and build trees (by default)
tmp = /tmp

# if set, java.home will be used to find java, jar, javadoc, rmi
java.home = /usr/local/java/j2sdk1.4.2_03
# java.command may be used to figure out java.home if not otherwise
java.command = java
# old syntax (still grudginly accepted)
# java = /usr/local/java/jdk1.4/bin/java

# which compiler to use.  valid options are "javac" and "jikes" and
# the actual command executed will depend on the $javac.command
# options below
#compiler = jikes
compiler = javac

# these may be modified to have full path names, or they will be found
# either via java.home or on the path.
#javac.command = javac
#jikes.command = jikes
#jar.command = jar
#javadoc.command = javadoc
#rmic.command = rmic

# other compiler options.  May be module prefixed (e.g. core.compiler.pedantic=1)
# pedantic compilation - issue lots of style/usage warnings (jikes only)
#compiler.pedantic = 1
# include as much debugging info as possible (local vars)
compiler.debug = 1
# report uses of deprecated features.
compiler.deprecation = 1
# optimize bytecode
#compiler.optimize = 1

# arguments for compiler commands. May be module prefixed (e.g. core.javac.arguments=...)
javac.arguments = -source 1.4 -target 1.4 -J-Xmx256m -J-Xms128m
#jikes.arguments =

# javadoc.command may specify a complete path - needs to be jdk1.3 or higher!
# javadoc.command = javadoc
# default memory settings are not enough to build the unified javadoc
default.javadoc.memory = -J-Xmx512m -J-Xms128m
# default.javadoc.arguments = 
default.javadoc.options = -breakiterator -source 1.4 -quiet -splitIndex -tag beaninfo:X:BeanInfo
default.javadoc.doclets = org.cougaar.tools.javadoc.CougaarDoclet
default.javadoc.taglets = org.cougaar.tools.javadoc.PropertyTaglet,\
	org.cougaar.tools.javadoc.ToDoTaglet,\
	org.cougaar.tools.javadoc.NoteTaglet,\
	org.cougaar.tools.javadoc.GeneratedTaglet, \
	org.cougaar.tools.javadoc.EventTaglet

# repository.base defaults to CVSROOT without the trailing "cougaar"
#repository.base=/cvsroot/alp/

# default repository tag is "cougaar"
#repository.default=cougaar

# HEAD is the default
#tag.default=HEAD

# where should we get the basic (3rd party) jars from?
# this lets us point to a specific directory
#   sys.lib=/local/cougaar/build.jars
#
# the syntax "module:foo" means get the sys libs from the lib
# directory of the "foo" module.  Note that the foo module should
# not be one of the built modules (e.g. should not listed in modules=)
sys.lib=module:jars

# these don't get shipped in cougaar-support.zip, usually because of
# licence restrictions.
#sys.lib.dontship =

# build.root defaults to /tmp/{product.name}
# build.root=/tmp/head

modules=\
	build,javaiopatch,bootstrap,util,core,\
	mtsstd,\
        planning,contract,toolkit,\
	yp,\
	glm,aggagent,\
	base,\
	csmart,\
	quo, qos, ping,\
	server,\
	webserver, webtomcat,\
	community, \
	albbn, stoplight, datagrabber,\
	servicediscovery, vishnu,\
	pizza

# default publicness to true - disable with mod.private=1
default.public=1
# modules which are public - that is, fully released

# modules which contribute to unified api (javadoc & moby src)
modules.unified =\
	build,\
	bootstrap,\
	util,\
	core,\
        planning,\
	contract,\
	toolkit,\
	yp,\
	glm,\
	aggagent,\
	base,\
	quo, qos, ping, mtsstd,\
	server,\
	webserver,webtomcat
# not: javaiopatch, implementations of basic services, AL

# note that unified support defaults to off.  To enable, either pass
# "-u" to build script or uncomment the following line:
#unified.enable = true;

##
## module-specific flags
##

# per-module compiler selection:
# all of the compiler.* options may be prefixed by a module name:
#core.compiler.pedantic = 1
#core.compiler.deprecation = 1
# Also, modules may specify specific branch tags, eg:
#core.tag = MYCOREBRANCH
# If you want a point tag, prefix the tag with a '@':
#core.tag = @MYCOREPOINTTAG
# You can also specify the repository on a per-module basis.  The
#following says to replace the tail of the default repository
#(e.g. from CVSROOT) with the value 'internal'
#vishnu.repository = internal
#or you can specify a complete CVSROOT value:
#albbn.repository = :ext:cvs.cougaar.org:/cvsroot/logistics

jars.repository = :ext:cvs.cougaar.org:/cvsroot/core

#Don't generate javadoc for the jdk patches
javaiopatch.javadoc = 0
javaiopatch.repository = :ext:cvs.cougaar.org:/cvsroot/core

# build tools requires the jdk tools jars
build.jars = tools
# include junit.jar in dist, even though it is only needed for
# build/release
build.extras = junit
# compiletime means that it is installed as clib rather than lib
build.compiletime = 1
build.repository = :ext:cvs.cougaar.org:/cvsroot/build

# bootstrap
bootstrap.keystore.alias = bootstrapper
bootstrap.repository = :ext:cvs.cougaar.org:/cvsroot/util

# util
util.deps = bootstrap
util.jars = log4j, xercesImpl, xml-apis
util.repository = :ext:cvs.cougaar.org:/cvsroot/util

# core
core.deps = bootstrap, util
core.jars = log4j, servlet, concurrent
core.repository = :ext:cvs.cougaar.org:/cvsroot/core

# mtsstd
mtsstd.deps = core, util
mtsstd.jars = log4j, servlet
mtsstd.repository = :ext:cvs.cougaar.org:/cvsroot/mts

# yellow pages
yp.deps = util, core
yp.jars = uddi4j, juddi, hsqldb
yp.repository = :ext:cvs.cougaar.org:/cvsroot/yp

# planning
planning.deps = util, core
planning.jars = xercesImpl, xml-apis, servlet
planning.repository = :ext:cvs.cougaar.org:/cvsroot/planning

# contract
contract.deps = util
contract.jars = xercesImpl,xml-apis
contract.repository = :ext:cvs.cougaar.org:/cvsroot/util

# toolkit
toolkit.deps = core, planning, util
toolkit.jars = xercesImpl,xml-apis
toolkit.repository = :ext:cvs.cougaar.org:/cvsroot/glm

# glm3
glm.deps = core,planning,toolkit,bootstrap,util
glm.jars = xercesImpl,xml-apis,fesi-111,jcchart,servlet
glm.extras = mm-mysql-2
glm.repository = :ext:cvs.cougaar.org:/cvsroot/glm
glm.runtime = bin

# aggregation agent
aggagent.deps = core,planning,glm,util
aggagent.jars = xercesImpl,xml-apis,jpython,silk,servlet
aggagent.repository = :ext:cvs.cougaar.org:/cvsroot/aggagent

# vishnu scheduler
vishnu.deps = core,planning,toolkit,glm,util
vishnu.jars = xercesImpl,xml-apis,vishnuServer
#vishnu.repository = internal
vishnu.module = vishnuClient
vishnu.repository = :ext:cvs.cougaar.org:/cvsroot/vishnu

# uiframework
#uiframework.repository = :ext:cougaarforge.cougaar.org:/cvsroot/cui
#uiframework.deps = core,planning,glm,util
#uiframework.jars = xercesImpl,xml-apis,openmap,vgj
#uiframework.extras = mm-mysql-2
#uiframework.runtime = bin

# tutorials
tutorial.deps = core,planning,util
#tutorial.jars = xercesImpl
tutorial.repository = :ext:cougaarforge.cougaar.org:/cvsroot/tutorials

# pizza
# Is YP needed? Will we need xml-apis? uddi?
pizza.deps = core,planning,util,servicediscovery,yp,community
pizza.jars = xercesImpl,servlet,xml-apis,jena,uddi4j
pizza.repository = :ext:cougaarforge.cougaar.org:/cvsroot/tutorials

# csmart
csmart.deps = core,planning,server,glm,bootstrap,util
csmart.jars = xercesImpl,xml-apis,jcchart,grappa1_2,servlet
# csmart wants DBMS for regression tests, too
csmart.extras = mm-mysql-2, log4j
#csmart.repository = internal
csmart.repository = :ext:cvs.cougaar.org:/cvsroot/csmart
# Set PrettyName for ANT script generation
csmart.PrettyName = CSMART

# quo/qos
qos.deps = core,util,mtsstd
qos.jars = quoSumo,servlet
qos.repository = :ext:cvs.cougaar.org:/cvsroot/qos

quo.deps = core,planning,qos,util,mtsstd
quo.jars = quoSumo
quo.repository = :ext:cvs.cougaar.org:/cvsroot/qos

ping.deps = core,planning,qos,quo,util,mtsstd
ping.jars = quoSumo,servlet
ping.repository = :ext:cvs.cougaar.org:/cvsroot/qos

# App (Node) Server
server.repository = :ext:cvs.cougaar.org:/cvsroot/util

# new PSP/web server
webserver.deps = bootstrap,core,util
webserver.jars = servlet
webserver.repository = :ext:cvs.cougaar.org:/cvsroot/webserver

webtomcat.deps = webserver
webtomcat.jars = servlet, tomcat_40
webtomcat.repository = :ext:cvs.cougaar.org:/cvsroot/webserver

# community
community.deps = util,core
community.jars = log4j,xercesImpl,servlet,concurrent
# added bootstrap for junit tests.
community.extras = bootstrap
community.repository = :ext:cvs.cougaar.org:/cvsroot/community

#
# Adaptive Logistics jars
#
#
# AL BBN
albbn.repository = :ext:cvs.cougaar.org:/cvsroot/logistics
albbn.module = bbn
albbn.deps = core,planning,util,toolkit,glm,vishnu,servicediscovery
albbn.jars = xercesImpl,xml-apis,openmap,fesi-111,jcchart,servlet,vishnuServer
albbn.runtime = bin,configs

# AL datagrabber
datagrabber.repository = :ext:cvs.cougaar.org:/cvsroot/logistics
datagrabber.deps = core,planning,glm,toolkit,util,albbn
datagrabber.jars = xercesImpl,xml-apis,chart,openmap,servlet

# AL stoplight
stoplight.repository = :ext:cvs.cougaar.org:/cvsroot/logistics
stoplight.deps = core,planning,glm,toolkit,util,albbn,aggagent
stoplight.jars = xercesImpl,xml-apis,servlet, openmap

#
# ServiceDiscovery
#
# contract
servicediscovery.deps = core, util, glm, planning, yp
servicediscovery.jars = xercesImpl,xml-apis,jena,servlet,uddi4j
servicediscovery.extras = icu4j,rdf-api-2001-01-19,jakarta-oro-2.0.5,antlr
servicediscovery.repository = :ext:cvs.cougaar.org:/cvsroot/servicediscovery

#
# distribution settings
#

base.repository = :ext:cvs.cougaar.org:/cvsroot/util

# runtime specs. Runtime always gets built libs, too.
# The build process will also try to exclude these guys
# from the "standard" locations to avoid duplication/confusion.
base.runtime = doc,bin,configs

# for each module, copy these files directly to the dist directory.
# This is really intended to be a one-shot for pointers to the 
# release notes and installation instructions.
# Leading directories disappear... e.g. so the following:
#   base.dist = doc/README.txt
# would copy README.txt from the doc subdirectory of core to 
# the top level dist.  If the last file is actually a directory, then
# the whole directory is copied.. e.g. :
#   base.dist = doc
# would copy the whole doc subdirectory into to top level dist as a
# new doc subdirectory.
base.dist = README

