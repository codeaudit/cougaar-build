<project name="simple" default="compile" basedir=".">

<taskdef name="pathproperty" classname="org.cougaar.tools.ant.PathProperty"/>
<taskdef name="trycall" classname="org.cougaar.tools.ant.TryCall"/>
<taskdef name="foreach" classname="org.cougaar.tools.ant.Foreach"/>

<!-- set global properties from user's .ant.properties file -->
<property file="${user.home}/.ant.properties"/>

<property name="project.classlib" value="${basedir}/lib"/>
<property name="project.tmpdir" value="${basedir}/tmpdir"/>
<property name="codegen.jar" value="${project.classlib}/build.jar"/>

<path id="jars">
  <fileset dir="${project.classlib}">
    <include name="*.jar"/>
  </fileset>
  <pathelement path="${java.class.path}"/>
</path>

<!-- Build the build files. Instead of checking individual build.xml
files into CVS, we build them here -->
<target name="build.files">
  <antcall target="for.all.modules">
    <param name="codegen.disable" value="true"/>
    <param name="target" value="build.file"/>
  </antcall>
  <antcall target="build.file">
    <param name="codegen.disable" value="true"/>
    <param name="module" value="build"/>
    <param name="insert.codegen.disable" value="true"/>
  </antcall>
</target>

<target name="build.filex">
  <copy file="${basedir}/build/build_module_prototype.xml" tofile="${basedir}/${module}/build.xml"/>
  <replace file="${basedir}/${module}/build.xml" token="@module@" value="${module}"/>
  <replace file="${basedir}/${module}/build.xml" token="@codegendisable@" value="${codegendisable}"/>
</target>

<target name="build.file">
  <antcall target="build.file.1">
    <param name="build.file" value="${basedir}/${module}/build.xml"/>
  </antcall>
</target>

<target name="build.file.1">
  <echo file="${build.file}">&lt;project name=&quot;${module}&quot; default=&quot;compile&quot;&gt;
&lt;property name=&quot;build.xml&quot; value=&quot;$${basedir}/build/build_common.xml&quot;/&gt;
&lt;property name=&quot;module&quot; value=&quot;${module}&quot;/&gt;</echo>
  <antcall target="build.file.codegen.suppress"> <param name="target" value="build.files"/> </antcall>
  <antcall target="build.file.target"> <param name="target" value="build.files"/> </antcall>
  <antcall target="build.file.target"> <param name="target" value="compile"/> </antcall>
  <antcall target="build.file.target"> <param name="target" value="jar"/> </antcall>
  <antcall target="build.file.target"> <param name="target" value="clean"/> </antcall>
  <antcall target="build.file.target"> <param name="target" value="extraclean"/> </antcall>
  <antcall target="build.file.target"> <param name="target" value="tags"/> </antcall>
  <antcall target="build.file.target"> <param name="target" value="compile.all"/> </antcall>
  <antcall target="build.file.target"> <param name="target" value="jar.all"/> </antcall>
  <antcall target="build.file.target"> <param name="target" value="clean.all"/> </antcall>
  <antcall target="build.file.target"> <param name="target" value="extraclean.all"/> </antcall>
  <antcall target="build.file.target"> <param name="target" value="tags.all"/> </antcall>
  <echo file="${build.file}" append="true">&lt;/project&gt;
</echo>
</target>

<target name="build.file.codegen.suppress" if="insert.codegen.disable">
  <echo file="${build.file}" append="true">
&lt;property name=&quot;codegen.disable&quot; value=&quot;true&quot;/&gt;
</echo>
</target>

<target name="build.file.target">
  <echo file="${build.file}" append="true">
&lt;target name=&quot;${target}&quot;&gt;
  &lt;ant antfile=&quot;$${build.xml}&quot; target=&quot;${target}&quot;/&gt;
&lt;/target&gt;
</echo>
</target>

<!-- Build the jar file unless we already have it. Caller determines
if we have the jar by setting have.jar -->

<target name="conditional.jar" unless="have.jar">
  <antcall target="jar"/>
</target>

<target name="insure.jar">
  <available property="have.jar" file="${project.classlib}/${module}.jar" />
  <antcall target="conditional.jar">
    <param name="module" value="${module}"/>
  </antcall>
</target>

<target name="build.jar">
<antcall target="insure.jar">
<param name="codegen.disable" value="true" />
<param name="module" value="build"/>
</antcall>
</target>
<target name="core.jar">
<antcall target="insure.jar">
<param name="module" value="core"/>
</antcall>
</target>
<target name="glm.jar">
<antcall target="insure.jar">
<param name="module" value="glm"/>
</antcall>
</target>
<target name="configgen.jar">
<antcall target="insure.jar">
<param name="module" value="configgen"/>
</antcall>
</target>
<target name="contract.jar">
<antcall target="insure.jar">
<param name="module" value="contract"/>
</antcall>
</target>
<target name="javaiopatch.jar">
<antcall target="insure.jar">
<param name="module" value="javaiopatch"/>
</antcall>
</target>
<target name="planserver.jar">
<antcall target="insure.jar">
<param name="module" value="planserver"/>
</antcall>
</target>
<target name="aggagent.jar">
<antcall target="insure.jar">
<param name="module" value="aggagent"/>
</antcall>
</target>
<target name="scalability.jar">
<antcall target="insure.jar">
<param name="module" value="scalability"/>
</antcall>
</target>
<target name="server.jar">
<antcall target="insure.jar">
<param name="module" value="server"/>
</antcall>
</target>
<target name="tutorial.jar">
<antcall target="insure.jar">
<param name="module" value="tutorial"/>
</antcall>
</target>
<target name="toolkit.jar">
<antcall target="insure.jar">
<param name="module" value="toolkit"/>
</antcall>
</target>

<!-- Here are the module prequisite definitions. The jar files for the
     prerequisite modules must be in place prior to a compilation -->

<target name="build.prerequisites"       depends=""                                             />
<target name="javaiopatch.prerequisites" depends="build.jar"                                    />
<target name="core.prerequisites"        depends="build.jar"                                    />
<target name="toolkit.prerequisites"     depends="build.jar"                                    />
<target name="planserver.prerequisites"  depends="build.jar,core.jar"                           />
<target name="aggagent.prerequisites"    depends="build.jar,core.jar,planserver.jar,glm.jar"    />
<target name="glm.prerequisites"         depends="build.jar,core.jar,toolkit.jar,planserver.jar"/>
<target name="contract.prerequisites"    depends="build.jar,core.jar"                           />
<target name="scalability.prerequisites" depends="build.jar,core.jar"                           />
<target name="server.prerequisites"      depends="build.jar"                                    />
<target name="tutorial.prerequisites"    depends="build.jar,core.jar,planserver.jar,glm.jar"    />
<target name="configgen.prerequisites"   depends="build.jar"                                    />
<target name="blackjack.prerequisites"   depends="build.jar,core.jar,planserver.jar,glm.jar"    />

<target name="project.classlib">
  <mkdir dir="${project.classlib}"/>
</target>

<target name="project.tmpdir">
  <mkdir dir="${project.tmpdir}"/>
</target>

<target name="module.tmpdir">
  <mkdir dir="${basedir}/${module}/tmpdir"/>
</target>

<target name="module.classes" depends="module.tmpdir">
  <mkdir dir="${basedir}/${module}/tmpdir/classes"/>
</target>

<target name="delete.directory">
  <available property="dir.exists" file="${dirname}"/>
  <antcall target="delete.directory.if"/>
</target>

<target name="delete.directory.if" if="dir.exists">
  <delete dir="${dirname}"/>
</target>

<target name="delete.module.tmpdir">
  <antcall target="delete.directory">
    <param name="dirname" value="${basedir}/${module}/tmpdir"/>
  </antcall>
</target>

<target name="delete.project.tmpdir">
  <antcall target="delete.directory">
    <param name="dirname" value="${project.tmpdir}"/>
  </antcall>
</target>

<target name="delete.module.jarfile">
  <delete>
    <fileset dir="${project.classlib}" includes="${module}.jar"/>
  </delete>
</target>

<target name="delete.tilde.files">
  <delete>
    <fileset dir="${basedir}/${module}/src" includes="**/*~"/>
  </delete>
</target>

<target name="delete.generated.code" depends="build.jar">
  <pathproperty name="codegen.path">
    <path>
     <pathelement path="${codegen.jar}"/>
     <path refid="jars"/>
    </path>
  </pathproperty>

  <execon executable="java"
          parallel="false"
          failonerror="false">
    <arg line="-classpath ${codegen.path} org.cougaar.tools.build.DefCleaner" />
    <fileset dir="${basedir}/${module}/src" >
      <include name="**/*.gen" />
    </fileset>
  </execon>
</target>

<!-- Standard targets -->
<target name="jar" depends="project.tmpdir,compile">
  <copy todir="${module}/tmpdir/classes" >
    <fileset dir="${module}/src" >
	<include name="**/*.def"/>
	<include name="**/*.props"/>
	<include name="**/*.gif"/>
	<include name="**/*.jpg"/>
	<include name="**/*.png"/>
    </fileset>
  </copy>
  <jar jarfile="${project.tmpdir}/${module}.jar" basedir="${basedir}/${module}/tmpdir/classes"/>
  <move file="${project.tmpdir}/${module}.jar" todir="${project.classlib}"/>
</target>

<target name="extraclean" depends="clean">
  <antcall target="delete.tilde.files"/>
</target>

<target name="clean">
  <antcall target="delete.generated.code"/>
  <antcall target="delete.module.tmpdir"/>
  <antcall target="delete.module.jarfile"/>
</target>

<target name="codegen" unless="codegen.disable">
  <antcall target="codegen.1"/>
</target>

<target name="codegen.1" depends="build.jar">
  <pathproperty name="codegen.path">
    <path>
     <pathelement path="${codegen.jar}"/>
     <path refid="jars"/>
    </path>
  </pathproperty>

  <execon executable="java"
	parallel="false"
	failonerror="false" >
    <arg line="-classpath ${codegen.path} org.cougaar.tools.build.DefRunner" />
    <fileset dir="${basedir}/${module}/src" >
      <include name="**/*.def" />
    </fileset>
  </execon>
</target>

<target name="compile" depends="project.classlib,module.classes">
<!--  <echo message="Compiling ${module}"/> -->
  <!-- Compiling any module invalidates its jar -->
  <antcall target="delete.module.jarfile"/>
  <antcall target="${module}.prerequisites"/>
  <antcall target="codegen"/>
  <javac srcdir="${basedir}/${module}/src"
         destdir="${basedir}/${module}/tmpdir/classes"
         depend="${build.compile.depend}"
         deprecation="${build.compile.deprecation}"
         debug="${build.compile.debug}"
     >
     <classpath>
      <fileset dir="${basedir}">
        <include name="*/tmpdir/classes"/>
      </fileset>
      <path refid="jars"/>
      <pathelement path="${destdir}"/>
      <pathelement path="${java.class.path}"/>
    </classpath>
  </javac>
</target>

<target name="tags" depends="project.tmpdir">
  <uptodate property="tagsok" targetfile="${basedir}/${module}/TAGS">
    <srcfiles dir="${module}/src">
      <include name="**/*.java"/>
    </srcfiles>
    <srcfiles dir="build" includes="build_common.xml"/>
  </uptodate>
  <antcall target="tags.1"/>
</target>

<target name="tags.1" unless="tagsok">
  <delete file="${module}/TAGS"/>
  <execon executable="etags" dir="${module}">
    <arg line="-a -r &quot;/.* interface +[a-zA-Z0-9_]+/&quot;"/>
    <fileset dir="${basedir}/${module}/src">
      <include name="**/*.java"/>
    </fileset>
  </execon>
  <echo file="${project.tmpdir}/tags.includes" append="true" message=" -i ${basedir}/${module}/TAGS"/>
</target>
  
<target name="for.one.module">
  <echo message="building ${target} for ${module}"/>
  <antcall target="${target}"/>
</target>
<!-- Support for doing all modules -->
<target name="for.all.modules">
  <antcall target="for.one.module">
    <param name="module" value="core"/>
  </antcall>
  <antcall target="for.one.module">
    <param name="module" value="glm"/>
  </antcall>
  <antcall target="for.one.module">
    <param name="module" value="toolkit"/>
  </antcall>
  <antcall target="for.one.module">
    <param name="module" value="configgen"/>
  </antcall>
  <antcall target="for.one.module">
    <param name="module" value="contract"/>
  </antcall>
  <antcall target="for.one.module">
    <param name="module" value="javaiopatch"/>
  </antcall>
  <antcall target="for.one.module">
    <param name="module" value="planserver"/>
  </antcall>
  <antcall target="for.one.module">
    <param name="module" value="aggagent"/>
  </antcall>
  <antcall target="for.one.module">
    <param name="module" value="scalability"/>
  </antcall>
  <antcall target="for.one.module">
    <param name="module" value="server"/>
  </antcall>
  <antcall target="for.one.module">
    <param name="module" value="tutorial"/>
  </antcall>
  <antcall target="for.one.module">
    <param name="module" value="blackjack"/>
  </antcall>
</target>

<target name="clean.all">
  <antcall target="for.all.modules">
    <param name="codegen.disable" value="true"/>
    <param name="target" value="clean"/>
  </antcall>
  <antcall target="clean">
    <param name="module" value="build"/>
  </antcall>
  <antcall target="delete.project.tmpdir"/>
</target>

<target name="extraclean.all">
  <antcall target="for.all.modules">
    <param name="codegen.disable" value="true"/>
    <param name="target" value="extraclean"/>
  </antcall>
  <antcall target="extraclean">
    <param name="module" value="build"/>
  </antcall>
  <antcall target="delete.project.tmpdir"/>
</target>

<target name="compile.all">
  <antcall target="for.all.modules">
    <param name="target" value="compile"/>
  </antcall>
</target>

<target name="javadoc.all">
  <antcall target="for.all.modules">
    <param name="target" value="javadoc"/>
  </antcall>
</target>

<target name="jar.all">
  <antcall target="for.all.modules">
    <param name="target" value="jar"/>
  </antcall>
</target>

<target name="tags.all" depends="project.tmpdir">
  <echo file="${project.tmpdir}/tags.includes" message="etags.args="/>
  <antcall target="for.all.modules">
    <param name="target" value="tags"/>
  </antcall>
  <property file="${project.tmpdir}/tags.includes"/>
  <exec executable="etags" dir="${basedir}">
    <arg line="${etags.args}"/>
  </exec>
</target>
</project>
