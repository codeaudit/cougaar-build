#!/usr/local/bin/perl -w

# <copyright>
#  Copyright 2001 BBNT Solutions, LLC
#  under sponsorship of the Defense Advanced Research Projects Agency (DARPA).
# 
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the Cougaar Open Source License as published by
#  DARPA on the Cougaar Open Source Website (www.cougaar.org).
# 
#  THE COUGAAR SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS
#  PROVIDED 'AS IS' WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR
#  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT
#  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT
#  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL
#  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS,
#  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
#  PERFORMANCE OF THE COUGAAR SOFTWARE.
# </copyright>


use strict;

# Program to scan the output from the nightly build for errors.
#  The complete output from the build script is read, and an
#  error log, and a brief error log are created.
#  E-mail is sent to the developers, currently with a pass/fail
#  message in the subject of the mail.
# 

# Mark Damish (Originally base on a Jim Glockling script)

# Revision History:
# 1998 Sum - Initial version.
# 1998 Fal - Added support for 'jikes' messages in the 'error' log. 
# 19990212 - Created a usefull 'brief' error log (javac & shell messages only).
#          - Mail only a 'pass'/'fail' message.
# 20000606 - A couple more regex's.
#          - Send html email, pointing to log files, when build fails.
#          - use strict
# 20000612 - 'Too many errors' didn't increment the number of errors.
#            It now adds 100.
#

# TTD 
#  - Catch errors when javac blows up and leaves a stack trace.
#  - Catch 'jikes' errors in the 'brief' log.
#


# ---------- Editable stuff ----------------
#
# Notify the proper authorities.
#
my $MAILRECEPIENTS     = "alpine-software-detail\@bbn.com" ;
#my $MAILRECEPIENTS     = "mdamish\@bbn.com" ;

# ----------End of editable stuff -----------

# Directory locations.
#
my $CRONLOGNAME    = "$ARGV[0]";
my $ERRORLOGNAME	= "$CRONLOGNAME" . "-error"; 
my $BRIEFLOGNAME	= "$CRONLOGNAME" . "-brief"; 

# Name of build.
#
@_ = split(/\//,$CRONLOGNAME);
my $BUILDNAME = pop(@_);
($BUILDNAME,undef) = split(/\./,$BUILDNAME);

# Number of errors.
#
my $num_errors = 0;





# ---------- Main --------
&openfiles ;         # Open files for read/write.
my @lines = <CRONLOG>;  # Read all lines from the file to memory.
&CreateErrorLog;     # Find interesting stuff, and write it to synopsis files.
&CreateBriefLog;     # Find interesting stuff, and write it to synopsis files.
&closefiles;         # Close the files.
&notify;             # Send e-mail.
exit;                # Done.
# --------- End of Main ----------



# Subroutines
#

sub openfiles {

    # The full cron output
    open(CRONLOG,"${CRONLOGNAME}") ||
	die "Can't open verbose log file $!" ;

    # Errors, if any. 
    open(ERRORS,">${ERRORLOGNAME}") ||
	die "Can't open error log for writing $!";

    # Brief, if any. 
    open(BRIEF,">${BRIEFLOGNAME}") ||
	die "Can't open brief log for writing $!";

} # END sub openfiles()


sub closefiles {
    close CRONLOG;
    close ERRORS;
    close BRIEF;
} # END sub closefiles()


sub notify {
        if ($num_errors == 0) { 
	   `/usr/bin/mailx -s "$BUILDNAME: Build Succeeded.  $num_errors errors found." "$MAILRECEPIENTS"      < "/dev/null"`;
        }
        # if
	else {
	   open  SENDMAIL, "| /usr/lib/sendmail -F 'Nightly Cron Build' -t" or die "Something went wrong with sendmail. $!";
	   print SENDMAIL "To: $MAILRECEPIENTS \n";
	   print SENDMAIL "Reply-to: mdamish\@bbn.com \n";
	   print SENDMAIL "Subject: $BUILDNAME: Build Failed.  $num_errors errors found. \n";
	   print SENDMAIL "MIME-Version: 1.0\n";
	   print SENDMAIL "Content-type: text/html; charset=us-ascii\n";
	   print SENDMAIL "Content-Transfer-Encoding: 7bit\n";
	   print SENDMAIL "\n";
	   print SENDMAIL "<!doctype html public \"//w3c//dtd html 4.0 transitional//en\">\n";
	   print SENDMAIL "<html>\n";
           print SENDMAIL "<a href=\"https://www.alpine.bbn.com/alpine/build-logs/$BUILDNAME.log\">Full log</a> <br> \n";
           print SENDMAIL "<a href=\"https://www.alpine.bbn.com/alpine/build-logs/$BUILDNAME.log-error\">Error log</a> <br> \n";
           print SENDMAIL "<a href=\"https://www.alpine.bbn.com/alpine/build-logs/$BUILDNAME.log-brief\">Brief log</a> <br> \n";
	   print SENDMAIL "<br> \n";
           print SENDMAIL "<a href=\"https://www.alpine.bbn.com/cgi-bin2/PluginDevelopers/build_results.pl\">All Build Results</a> <br> \n";
	   print SENDMAIL "<br>\n";
	   print SENDMAIL "</html>\n";
	   close SENDMAIL;
        } # else
	
	# Mail for people who like to receive error logs.
	`/usr/bin/mailx -s "Build Summary: $BUILDNAME" "cerys\@bbn.com"     < "$ERRORLOGNAME"`;

} # END sub notify()


sub CreateErrorLog {

    #$compile_pass = 0;   # 0 = before javac.  
                         # 1,2 = pass number.
		         # remains on 2 when javac completes.

    my $compiling_dir;
    my $line_num;

    for ($line_num = 0;  $line_num <= $#lines;  $line_num++) {
       
	my $line;
	$line = $lines[$line_num];

        # Pick out when different types of processes begin/end.
        # eg  javac passes, jar, javadoc...
	
        # Get any "Starting" messages, and determine which pass we are in.
        # This NEEDS to be the FIRST item checked, as it determines which 
        # pass javac is in.
        #   (Generated by AlpMake-wrapper.sh)
        #
#	if ($line =~ /^wrapper: Starting/) {
#	    print ERRORS "$line";	   
#	    if ($line =~ /1st/) {
#		$compile_pass = 1;
#		print ERRORS "[javac errors, warnings and status are suppressed for first compile pass.]\n"; 
#	    } # if 
#	    if ($line =~ /2nd/) {
#		$compile_pass = 2;
#		# print ERRORS "[javac warnings suppressed for second javac pass.]\n"; 
#	    } # if 
#	} # if
#
#       # Suppress errors/warnings on the first pass.
#	#
#	if ( ($compile_pass == 1) ) {
#	    next;                # <---
#	} # if


	# Catch state changes from the build script.
	# The build script uses '=>' as a prefix for progress messages.
	#   (Generated by /usr/local/bin/build-release)
	#
	if ($line =~ /^=>/) {
	    print ERRORS $line;
	} # if


	# Catch when build script generates an error and dies.
	# The build script uses the string 'ERROR!!' when it detects a problem. 
	#   (Generated by /usr/local/bin/build-release)
	#
	if ($line =~ /^ERROR!!/) {
	    print ERRORS $line;
	} # if


	# Get the  name of the directory that is being compiled.
	#   (Generated by alp_compile.sh, which is created by AlpMake)
	#
	if ($line =~ /^COMPILING:/) {
	    print ERRORS  $line;
	    $compiling_dir = $line; 
	} # if


	# A compile time error or warning is denoted by a '^'
	# Print this, and the previous two lines.
	#   (Generated by javac)
	#
	if ($line =~ /\^/) {
	    print ERRORS $lines[$line_num-2];
	    print ERRORS $lines[$line_num-1];
	    print ERRORS $lines[$line_num];
	} # if
	

	# Trap cases with a number followed by the word 'error'.
	#    (Generated by javac)
	#
	if ($line =~ /^[0-9]+ error/) {
	    print ERRORS $line;
	} # if
	
        # Just discovered this 12Feb99 'Too many errors'.
        #   (Generated by javac)
        #
        if ($line =~ /^Too many errors/) {
	    print BRIEF $compiling_dir;
	    print BRIEF $line;
	    $num_errors += 100;
        }


	# Trap cases with a number followd by the word 'warning'.
	#    (Generated by javac)
	#
	if ($line =~ /^[0-9]+ warning/) {
	    print ERRORS $line;
	} # if

	# 'Note:' is also a warning generated by javac
	#  (Generated by javac)
	#
	if ($line =~ /^Note:/) {
	    print ERRORS $line;
	} # if


	# Error signing a jar file
	#  (Generated by jarsigner)
	#
	if ($line =~ /^jarsigner error/) {
	    print ERRORS $line;
	} # if 

        # Added 20000605
	# Usually a 'class not found' error.
	#  (Generated by javac)
	#
	if ($line =~ /^error:/) {
	    print ERRORS $line;
	} # if 

	# Trap a stack trace here. Usually means javac blew up.
	#    (Generated by javac)
	#


	# Jikes TTD:
	#  - print ALL /^\*\*\* / messages, and determine
	#    how many previous lines to print out, based
	#    on content.
	#

	# Trap Jikes compile Errors
	# (Generated by jikes)
	#
	if ($line =~ /^\*\*\* Error:/) {
	  print ERRORS $lines[$line_num-2];
	  print ERRORS $lines[$line_num-1];
	  print ERRORS $lines[$line_num];
	} # if

	# Trap Jikes compile Warnings
	# (Generated by jikes)
	#
	if ($line =~ /^\*\*\* Warning:/) {
	  print ERRORS $lines[$line_num-2];
	  print ERRORS $lines[$line_num-1];
	  print ERRORS $lines[$line_num];
	} # if

	# Misc Jikes warnings
	# (Generated by jikes)
	#
	if ( $line =~ /^Issued /) {
	  print ERRORS $line;
	} # if


	# Misc Jikes errors
	# (Generated by jikes)
	#
	if ( $line =~ /^Found /) {
	  print ERRORS $line;
	} # if

    } # for  

} # END sub CreateErrorLog()



sub CreateBriefLog {

    my $compiling_dir;
    my $line_num;

    for ($line_num = 0;  $line_num <= $#lines;  $line_num++) {

        my $line;
	$line = $lines[$line_num];

	if ($line =~ /^ERROR!!/) {
	    print ERRORS $line;
            ++$num_errors;
	} # if

	if ($line =~ /^COMPILING:/) {
	    $compiling_dir = $line; 
	} # if

	if ($line =~ /^([0-9]+) error/) {
	    print BRIEF $compiling_dir;
	    print BRIEF $line;
	    $num_errors += $1;
	} # if
	
	# Error signing a jar file
	#  (Generated by jarsigner)
	#
	if ($line =~ /^jarsigner error/) {
	    print BRIEF $line;
	    $num_errors += $1;
	} # if 


        #Too many errors.
        if ($line =~ /^Too many errors/) {
	    print BRIEF $compiling_dir;
	    print BRIEF $line;
	    $num_errors += 100;
        } # if

    } # for

} # END sub CreateBriefLog

