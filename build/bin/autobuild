#!/usr/bin/perl
# -*- Perl -*-

# <copyright>
#  Copyright 2001-2003 BBNT Solutions, LLC
#  under sponsorship of the Defense Advanced Research Projects Agency (DARPA).
# 
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the Cougaar Open Source License as published by
#  DARPA on the Cougaar Open Source Website (www.cougaar.org).
# 
#  THE COUGAAR SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS
#  PROVIDED 'AS IS' WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR
#  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT
#  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT
#  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL
#  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS,
#  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
#  PERFORMANCE OF THE COUGAAR SOFTWARE.
# </copyright>

#
# build script driver - used to run the build script hands-off 
# periodically (eg. hourly, daily, whatever).
# This is the script which is actually used for nightlies and releases,
# so it is tuned to BBNT's use - other potential users will have to make
# the obvious changes.
#

# Note that the bootstrapping proceedure assumes that CVSROOT is already
# properly set so that the build module can be checked out directly.
#

# examples:
# build the head (normal hourly build):
#   autobuild
# build V7_2
#   autobuild -v -t V7_2 -d alp72.build


use Cwd;
use File::Copy;
use File::Path;
use File::Find;

# for specfile parsing,grabbing
use CGI;
use LWP::Simple;

require "getopts.pl";

# Tag argument is interpreted to find the right build spec file.
# in most general form, it is an arbitrary URL source for the spec.
# some extensions and simplifications are accepted.
# examples:
# generic http (ftp, file, etc also work):
#   http://cf.cougaar.org/build/browse/HEAD/build/data/default.build
# full cvs form:
#   cvs://cvs.cougaar.org/cvsroot/build&path=build/data/default.build&tag=B10_4
# shorthand for above:
#   B10_4
# non-specified components of CVS option are defaulted, eg:
#  cvs://alternate.cougaar.org
# is interpreted as "cvs://alternate.cougaar.org/cvsroot/build&path=build/data/default.build&tag=HEAD"
$defaults{protocol} = "cvs";
$defaults{tag} = "HEAD";
$defaults{domain} = "cvs.cougaar.org";
$defaults{repository} = "/cvsroot/build";
$defaults{file} = "build/data/default.build";

$specTag;			# default tag as given by the specfile
$impliedTag;			# tag used to check out the specfile (if known)

$verbose = 0;
$auto = "auto";
$tag;				# tag to use to pass to the build script (-t arg)
$default_group = "AUTO";
$group;
$data = "default.build";
$host = "eiger.alpine.bbn.com";
$cleanup = 1;
$keep = 3;

$ssh = "ssh -n";
$scp = "scp -B";
$extraargs="";

chdir("/tmp");			# is it safe?

&Getopts('vVm:a:t:d:hkT:H:po:n:j:Cg:S:E');
if ($opt_h) {
  print STDOUT "Usage: autobuild [args]\n";
  print STDOUT "\t-v\tVerbose mode\n";
  print STDOUT "\t-V\tVery Verbose mode (implies -E)\n";
  print STDOUT "\t-E\tPrints error log\n";
  print STDOUT "\t-a name\tDirectory name instead of 'auto'\n";
  print STDOUT "\t-S buildspec\tURL or spec to use instead of default HEAD build\n";
  print STDOUT "\t-g group\tPosting group to use instead of 'AUTO', defaults to tag if specified\n";
  print STDOUT "\t-C\tOnly clean\n";
  print STDOUT "\t-d file\tData file to use instead of 'default.build'\n";
  print STDOUT "\t-k\tDont clean up afterwards (leave leftovers)\n";
  print STDOUT "\t-T dir\tPut temporary files in dir/group instead of /tmp/group\n";
  print STDOUT "\t-H host\tPublish to host instead of \"$host\"\n";
  print STDOUT "\t-h\tThis usage commend\n";
  print STDOUT "\t-p\tTag is to be treated as a point-tag (avoid use of cvs export -D)\n";
  print STDOUT "\t-o string\tPass string as extra arguments to build\n";
  print STDOUT "\t-n N\tKeep the last N builds online (default is $keep).\n";
  print STDOUT "\t-j path\tSet java.home to path.\n";
  print STDOUT "\t-m address\tSend email to address if the build fails\n";
  exit(-1);
}

$printErrorlog = $opt_E;

if ($opt_g) {
  $group = $opt_g;
} else {
  if ($opt_t) {
    $group = $opt_t;
  }
}

$host = $opt_H if $opt_H;
$cleanup=0 if $opt_k;
$onlyclean = $opt_C;
$tag = $opt_t if ($opt_t);
if ($opt_S) {
  $buildspec = $opt_S;
} else {
  if ($tag ne "") {
    $buildspec = $tag;
  }
}
$extraargs = $opt_o if ($opt_o);
$javahome = $opt_j if ($opt_j);

$verbose++ if $opt_v;
$verbose=3 if $opt_V;
if ($verbose > 2) { $printErrorlog++; }
$auto = $opt_a if ($opt_a);
$data = $opt_d if ($opt_d);
$mailaddr = $opt_m if ($opt_m);

if ($onlyclean) {
  cleanRemote();
  exit 0;
}

#if ($opt_t && !$opt_a) {
#  $auto = $opt_t;
#}

if ($opt_T) {
  $tmpbase = $opt_T;
} else {
  $tmpbase = "/tmp";
}

&mkd($tmpbase);

# bootstrap the build process
$tmpdir = "/tmp/autobuild.$$";
mysystem("rm -rf $tmpdir");
mkd($tmpdir);

$buildspecfile;			# specfile
$buildscript;			# buildscript

# get the buildspecs
($buildspecfile,$buildscript,$group,$tagdate) = grab_buildspec($tmpdir, $buildspec);
$group = $default_group if ($group eq "");

# install the signal handlers
$SIG{INT} = 'sighandler';
$SIG{QUIT} = 'sighandler';

$tmp = "$tmpbase/$group";
&mkd($tmp);

$statusfile = "$tmp/STATUS";
$lockfile = "$tmp/LOCK";
acquireLock();
logMessage("Started");

# this is where build will build into
$builddir = "$tmp/$group";
$keep = $opt_n if $opt_n;	# reset the keep value if we need to

# clean up any waxy yellow buildup
mysystem("rm -rf $builddir");
&mkd($builddir);

# let them know we're in progress
{
  my($ds) = datestr();
  ssh("$host mkdir -p $auto/$group \\; rm -f $auto/$group/STATUS \\; echo BUILD started at $ds \\> $auto/$group/STATUS");
}

if ($tag eq "") {		# no tag specified
  if ($specTag) {		# ... but that's ok - the specfile defines one
  } else {
    if ($impliedTag ne "") {	# use impliedTag if we know it...
      $tag = $impliedTag;
    } else {			# otherwise we'll warn and hope for the best
      print "Warning: no default tag specified.\n";
    }
  }
}

# start a fresh build
$rarg = "";
if ($tag ne "") {
  $rarg = "-r $tag" if (! ($tag eq "HEAD"));
}
if ($javahome) {
  $extaargs = "$extraargs -ojava.home=$javahome";
}
if ($tagdate ne "") {
  $extraargs = "$extraargs -D \"$tagdate\"";
}
mysystem("$buildscript -v $rarg $extraargs -obuild.root=$builddir -otmp=$tmp $buildspecfile >$tmp/$group.out");

# what did we build?
opendir D, $builddir;
@allfiles = grep !/^\./, readdir D;
closedir D;
$built = $allfiles[0];

# could we build it?
$status = "UNKNOWN";
{
  open(R, "tail -1 $builddir/$built/dist/build.out|");
  my @lines;
  @lines = <R>;
  close(R);

  if ($verbose>1) {
    my($line);
    print STDOUT "\nBuild log:\n";
    foreach $line (@lines) {
      print STDOUT $line;
    }
  }

  my $line = $lines[0];
  if ( ($line =~ /SUCCEEDED/)) {
    $status = "SUCCEEDED";
  } elsif (($line =~ /FAILED/)) {
    $status = "FAILED";
  }
}

# parse the old status reports
@statusReports;
{
  if (!open(STAT, "<$statusfile")) {
    logMessage("Couldn't open status file $statusfile for reading - something seriously wrong");
  } else {
    while (<STAT>) {
      chop;
      push @statusReports, $_;
    }
    close(STAT);
  }
}

# record the status
{
  if (!open(STAT, ">>$statusfile")) {
    logMessage("Couldn't open status file $statusfile for write - something seriously wrong");
  } else {
    print STAT "$built\t$status\n";
    close(STAT);
  }
}

# output the error log for requested builds
printErrors() if ($printErrorlog);

# send email if requested
if (! ($status eq "SUCCEEDED")) {
  mailreport($status);
}

# copy whatever is there to $host
ssh("$host mkdir -p $auto/$group/$built");
scp("$builddir/$built/dist/* $host:$auto/$group/$built");
ssh("$host cd $auto/$group \\; rm -f latest \\; ln -s $built latest");

# leave only last n builds
cleanRemote();

{
  my($ds) = datestr();
  ssh("$host rm -f $auto/$group/STATUS \\; echo BUILD $status finished at $ds \\> $auto/$group/STATUS");
}


mysystem("rm -rf $tmpdir");
mysystem("rm -rf $builddir") if $cleanup;
releaseLock();
logMessage("Finished");

exit 0;


sub mysystem {
  local($command)= @_;

  print STDOUT "$command\n" if ($verbose>1);
  if ($pretend) {
    return 0;
  }

  if ($pid = fork ) {
    # parent
    waitpid $pid, 0;
    local($rc)= $?;
    # signal decoding from Perl5 manual
    $rc &= 0xffff;
    if ($rc != 0) {
      $sawerror++;
      if ($rc == 0xff00) {
	print STDOUT "Command failed: $command $!\n";
      } elsif ($rc > 0x80) {
	$rc >>= 8;
	print STDOUT "Completed with exit status of $rc\n";
      } else {
	print STDOUT "Ran with ";
	if ($rc &  0x80) {
	  $rc &= 0x80;
	  print STDOUT "coredump from ";
	}
	print STDOUT "signal $rc\n";
      }
    }
  } elsif (defined $pid) {
    # child
    exec $command;
    print STDOUT "$command: $!\n";
    exit(-1);
  } else {
    logMessage("Failed: Couldn't run @_");
    die "Couldn't run @_\n";
  }
}

sub mkd {
  my($p) = @_;
  mkdir $p, 0777;
}

sub ssh {
  my($c) = @_;
  mysystem("$ssh $c");
}

sub scp {
  my($c) = @_;
  mysystem("$scp $c");
}

sub datestr {
  local($sec, $min, $hour, $mday, $mon, $yr, $wday, $yday, $isdst) = localtime;
  $yr = $yr+1900;
  $mon++;
  $min="0$min" if ($min<10);
  $sec="0$sec" if ($sec<10);
  # default repository date
  # build time for build directory name
  $mon="0$mon" if ($mon<10);
  $mday="0$mday" if ($mday<10);
  $hour="0$hour" if($hour<10);
  $yr=$yr-2000;
  $yr="0$yr" if ($yr<10);
  "$yr$mon$mday$hour$min$sec";
}

sub logMessage {
  local($s)=@_;
  print STDOUT "$s\n" if ($verbose>1);
  open(LOG, ">>$tmp/$group.log");
  my ($d) = datestr();
  print LOG "$d\t$s\n";
  close(LOG);
}


sub cleanRemote {
  open(B, "$ssh $host ls $auto/$group|");
  @alldirs = <B>;
  close(B);

  @alldirs = grep /^[0-9]*$/, @alldirs;
  @alldirs = sort @alldirs;

  my $lsucc;
  my $lfail;

  # scan, oldest first
  foreach $dir (@alldirs) {
    chomp $dir;
    my $status = checkRemoteStatus($dir);
    $status{$dir} = $status;
    $lsucc = $dir if ($status eq "SUCCEEDED");
    $lfail = $dir if ($status eq "FAILED");
    print STDOUT "Status of $dir = $status\n" if ($verbose>1);
  }

  # if we saw a success or failure, then we're watching complient builds
  if ($lsucc || $lfail) {
    my $sc = 0;
    my $fc = 0;
    ssh("$host cd $auto/$group \\; rm -f latest_success latest_failure");
    foreach $dir (reverse @alldirs) {
      chomp $dir;
      my $status = $status{$dir};
      if ($status eq "SUCCEEDED") {
	$sc++;
	$fc = 100;		# don't keep any older failures!
	# first is latest
	if ($sc == 1) {
	  ssh("$host cd $auto/$group \\; ln -s $dir latest_success");
	}
	if ($sc > 2) {
	  rrm($dir);
	}
      }
      if ($status eq "FAILED") {
	$fc++;
	if ($fc == 1) {
	  ssh("$host cd $auto/$group \\; ln -s $dir latest_failure");
	}
	if ($fc > $keep) {
	  rrm($dir);
	}
      }
    }
  } else {
    # older-style builds: keep the most recent N builds

    # skip over keepers
    $i=0;
    while ($i <= $keep && ($_= pop @alldirs)) {
      $i++;
    }

    while ( ($_ = pop @alldirs)) {
      chomp;
      rrm($_);
    }
  }
}

sub rrm {
  my ($p) = @_;
  ssh("$host rm -rf $auto/$group/$p");
}

sub checkRemoteStatus {
  my ($rd) = @_;

  print STDOUT "$ssh $host tail -1 $auto/$group/$rd/build.out\n" if ($verbose>1);
  open(R, "$ssh $host tail -1 $auto/$group/$rd/build.out|");
  my @lines;
  @lines = <R>;
  close(R);

  my $line = $lines[0];
  my $result = "UNKNOWN";
  if ( ($line =~ /SUCCEEDED/)) {
    $result = "SUCCEEDED";
  } elsif (($line =~ /FAILED/)) {
    $result = "FAILED";
  }
  $result;
}

sub printErrors {
  my($statfile)= "$builddir/$built/dist/errors.out";
  if (-r $statfile) {
    print STDOUT "\nError log $statfile:\n";
    open(R, "<$statfile");
    while (<R>) {
      print STDOUT $_;
    }
    close(R);
  }
}

sub mailreport {
  my ($report) = @_;
  if (! ($mailaddr eq "") ) {
    my($statfile)= "$builddir/$built/dist/errors.out";
    my($complaint) = "Build of $group at $built $report";

    if (-r $statfile) {
      mysystem("/bin/mail -s \"$complaint\" $mailaddr <$statfile");
    } else {
      mysystem("/bin/mail -s \"$complaint\" $mailaddr < /dev/null");
    }
  }
}

#
# tag parsing and specfile grabbing
#

sub grab_buildspec {
  # arguments 
  # grok the passed buildspec/tag info, grab it from the right spot
  # and leave it in the returned filename(s)

  my ($tf, $spec) = @_;
  my $specf = "$tf/build.spec";
  my $buildf = "$tf/build";
  my $sgroup = $group;

  my $hash = parse_buildspec($spec);
  my $proto = $hash->{protocol};
  my $content;

  if ($proto eq "cvs") {
    # grab it via cvs
    my $qarg = $verbose?"-Q ":"";
    my $domain = $hash->{domain};
    $domain = $defaults{domain} if ($domain eq "");
    my $repository = $hash->{repository};
    $repository = $defaults{repository} if ($repository eq "");
    my $cvsroot = ":ext:$domain:$repository";
    $ENV{CVSROOT} = $cvsroot;
    my $tag = $hash->{tag};
    if ($tag ne "") {
      $impliedTag = $tag;
    }
    $tag = $defaults{tag} if ($tag eq "");
    $sgroup = $tag if ($sgroup eq "");
    my $file = $hash->{file};
    $file = $defaults{file} if ($file eq "");
    my $command = "cvs -d $cvsroot $qarg co -p -r $tag $file";
    print "Getting '$command' to '$specf'\n" if $verbose;
    open(CVS, "$command|") || die "Could not check out spec with '$command'";
    while (<CVS>) {
      $content .= $_;
    }
    close(CVS);
  } else {
    # grab it via http or whatever
    print "Copying '$spec' to '$specf'\n" if $verbose;
    $content = get($spec);
    die "Couldn't open '$spec'" unless defined $content;
  }

  open(F, ">$specf") || die "Couldn't open '$specf' for writing";
  print F $content;
  close(F);

  my $ddate;
  {
    my $brep;
    my $bmod = "build";
    my $btag;
    my $bpath = "bin/build";
    my $dtag;
    # parse content for important bits
    foreach $_ (split("\n",$content)) {
      next if (/\s*#/);
      $btag = $1 if (/^\s*build\.tag\s*=\s*(.*)/);
      $brep = $1 if (/^\s*build\.repository\s*=\s*(.*)/);
      $bpath = $1 if (/^\s*build\.script\s*=\s*(.*)/);
      $bmod = $1 if (/^\s*build\.module\s*=\s*(.*)/);
      $dtag = $1 if (/^\s*default\.tag\s*=\s*@?(.*)/);
      $ddate = $1 if (/^\s*default\.date\s*=\s*(.*)/);
      $bgroup = $1 if (/^\s*build\.group\s*=\s*(.*)/);
    }
    $specTag = $dtag;
    if ($btag eq "") {
      if ($dtag eq "") {
	# ugh.  just use HEAD
	$btag = "HEAD";
      } else {
	$btag = $dtag;
      }
    }
    if ($brep eq "") {		# no repository spec? just use default
      my $domain = $defaults{domain};
      my $repository = $defaults{repository};
      $brep = ":ext:$domain:$repository";
    }

    my $darg = "";
    if ($ddate ne "") { $darg = " -D \"$ddate\""; }
    my $command = "cvs -d $brep -Q co -p -r $btag$darg $bmod/$bpath";
    print "getting script with \"$command\"\n" if ($verbose>1);
    mysystem("$command > $buildf");
    if (! -r $buildf) {
      die ("Failed to get build script");
    }
    mysystem("chmod a+x $buildf");
    $sgroup = $bgroup if (defined $bgroup);
  }

  return ($specf, $buildf, $sgroup, $ddate);
}


sub print_buildspec {
  # parse the passed buildspec and print the contents.
  my $spec = shift;
  my $hash = parse_buildspec($spec);
  print "\n$spec\n";
  print " protocol=$hash->{protocol}\n";
  print " domain=$hash->{domain}\n";
  print " repository=$hash->{repository}\n";
  print " tag=$hash->{tag}\n";
  print " file=$hash->{file}\n";
}


sub parse_buildspec {
  #return a hashref to parsed buildspec url
  my $spec = shift;
  return \%defaults if ($spec eq "");

  my $parts = parse_url($spec);
  my $protocol =$parts->{protocol};
  if ($protocol eq "") {
    # blew the parse, assume it is a cvs tag
    my %tmp = %defaults;
    $tmp{tag} = $spec;
    return \%tmp;
  }
  my $domain = $parts->{domain};
  my $path = $parts->{path};
  my $file = $parts->{file};
  my $fpath = "$path$file";
  my $query = new CGI($parts->{arguments});
  my $ptag=$query->param('tag');
  my $ppath = $query->param('path');

  my (%hash) = ();
  $hash{protocol} = $parts->{protocol};
  $hash{domain} = $parts->{domain};
  $hash{repository} = $fpath;
  $hash{tag} = $ptag;
  $hash{file} = $ppath;
  return \%hash;
}


sub parse_url {
# Pass in a URL. Hashref is returned.
  my $url     = shift;
  my (@parts) = $url =~ m|^([^:]+)://([^/]+)(?:(/.+?/?)([^/]+)?)?(\&.+)?$|;
  my (%slice) = ();
  @slice{qw/protocol domain path file arguments/} = @parts;
  return \%slice;
}

#
# signal handling
#
sub acquireLock {
  if (open(LOCK, "<$lockfile")) {
    $pid = <LOCK>;
    close(LOCK);
    chop $pid;
    logMessage("Lockfile $lockfile is owned by process $pid - exiting.");
    mailreport("FAILED: could not acquire lock");
    die("Could not acquire lock $lockfile");
  }

  if (!open(LOCK, ">$lockfile")) {
    logMessage("Couldn't open lockfile $lockfile for write - something seriously wrong");
    mailreport("FAILED: could not acquire lock");
    die("Could not acquire lock $lockfile");
  }
  print LOCK "$$\n";
  close(LOCK);
}

sub releaseLock {
  if (! open(LOCK, "<$lockfile")) {
    logMessage("Couldn't read lockfile $lockfile - we'll assume it is ok");
    return;
  }
  $pid = <LOCK>;		# one line;
  close(LOCK);

  chop $pid;
  if (! ($pid eq $$)) {
    logMessage("Lock held by $pid instead of $$ - someone is probably losing");
    return;
  }
  unlink($lockfile);
}

# handle signals
sub sighandler {
  local ($sig) = @_;
  print "Caught a SIG$sig -- exiting\n";
  releaseLock();
  logMessage("build failed (signal $sig)");
  exit(0);
}
