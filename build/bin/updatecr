#!/usr/bin/perl
# -*- Perl -*-

# updatecr reads a list of files from the standard input, updating
# any copyright notices it finds which conform to a standard format:

# <copyright>
#  Copyright 1969-2001 BBNT Solutions, LLC 
#  under sponsorship of the Defense Advanced Research Projects Agency (DARPA).
# 
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the Cougaar Open Source License as published by
#  DARPA on the Cougaar Open Source Website (www.cougaar.org).
# 
#  THE COUGAAR SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS
#  PROVIDED 'AS IS' WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR
#  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT
#  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT
#  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL
#  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS,
#  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
#  PERFORMANCE OF THE COUGAAR SOFTWARE.
# </copyright>

# Default behavior is to update a "standard" format copyright notice
# to include the current year.
#
# optionally, also report on files without a standard CR notice and/or
# add standard CR notices.
#
# takes a list of files to check/update

# {RANGE} is replaced by the actual year or year range.
# {COMPANY} is replaced by the company found or default_company;

$stdcr = <<EOF;
 Copyright {RANGE} {COMPANY}
 under sponsorship of the Defense Advanced Research Projects Agency (DARPA).

 This program is free software; you can redistribute it and/or modify
 it under the terms of the Cougaar Open Source License as published by
 DARPA on the Cougaar Open Source Website (www.cougaar.org).

 THE COUGAAR SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS
 PROVIDED 'AS IS' WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR
 IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT
 ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT
 HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL
 DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS,
 TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 PERFORMANCE OF THE COUGAAR SOFTWARE.

EOF

@stdlines = split(/\n/,$stdcr);


$tag0 = "<copyright>";
$tag1 = "</copyright>";
$crx = "copyright";

$bbn_company = "BBNT Solutions, LLC";
$default_company = $bbn_company;

$tmp = "/tmp/cr.$$";
$spin = 0;

$total = 0;
$std = 0;
$nonstd = 0;
$missing = 0;
$added = 0;

($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
$yyyy = $year+1900;

open(STANDARD, ">/tmp/cr-standard");
open(NONSTANDARD, ">/tmp/cr-nonstandard");
open(MISSING, ">/tmp/cr-missing");
open(FIXED, ">/tmp/cr-added");

while (<>) {
  chop;
  $file = $_;
  if (/CVS/ ||
      /\.jar/ ||
      /\.zip/ ||
      /\.gif/ ||
      /\.jpg/
     ) {
    next;
  }
  $total++;

  $state = &process($file);
  if ($state eq "standard") {
    print STANDARD "$file\n";
    $std++;
  } elsif ($state eq "nonstandard") {
    print NONSTANDARD "$file\n";
    $nonstd++;
  } elsif ($state eq "fixed") {
    print FIXED "$file\n";
    $fixed++;
  } else {
    print MISSING "$file\n";
    $missing++;
  }
}

print "Examined $total files\n";
print "\tStandard\t$std\n";
print "\tNonstandard\t$nonstd\n";
print "\tAdded\t$fixed\n";
print "\tMissing\t$missing\n";

close(STANDARD);
close(NONSTANDARD);
close(MISSING);
close(FIXED);
exit(0);

sub process {
  local($file) = @_;
  $spin = ($spin+1)&3;
  my $c = substr '-/|\\',$spin,1;
  print STDERR "$c\010";
  local($found)=0;		# if != 0, copy the file back

  local($parsing)=0;		# if != 0, reading a CR notice
  local($lead) = "";		# leading text before a CR tag
  local($trail) = "";		# trailing text after a CR tag
  local($lq)="";
  local($tq)="";
  local($std)=0;
  local($nonstd)=0;
  local($t0) = $yyyy;
  local($t1) = "";

  open(IN, "<$file");
  unlink($tmp);
  open(OUT, ">$tmp");
  local ($crp) = "";
  while (<IN>) {
    if (!$parsing) {		# not currently parsing a std notice?
      if (/(.*)$tag0(.*)/i && !/tag0/) { # skip updatecr tag setting itself!
	$parsing = 1;
	$lead = $1;
	$trail = $2;
	$lq = quotemeta $lead;
	$tq = quotemeta $trail;
      } else {
	if (/$crx/i) {
	  $nonstd++;
	}
	print OUT $_;
      }
    } else {			# currently parsing std notice
      if (/$tag1/i) {
	$std = 1;
	$parsing = 0;
	local($rv,$cv)=parse_oldcr($crp);
	#print STDERR "$file: $rv $cv\n";
	print OUT "$lead$tag0$trail\n";
	foreach $rl (@stdlines) {
	  my $l = $rl;
	  $l =~ s/\{RANGE\}/$rv/;
	  $l =~ s/\{COMPANY\}/$cv/;
	  print OUT "$lead$l$trail\n";
	}
	print OUT "$lead$tag1$trail\n";
	$found++;
      } else {
	chomp;
	$crp .= " " if ($crp);
	if (/$lq(.*)$tq/) {
	  $crp .= $1;
	} else {
	  print STDERR "Warning! Bad oldcr in $file\n";
	  $crp .= $1;
	}
      }
    }
  }
  close(OUT);
  close(IN);

  local($missing) = (!$std && !$nonstd);
  local($fixed) =0;
  if ($missing) {
    local($how);
    if ( ($file =~ /\.java$/)) {
      $found=1;
      $fixed = 1;
      open(IN, "<$file");
      open(OUT,">$tmp");
      $lead = " * ";
      $trail = "";
      local($rv) = $yyyy;
      local($cv) = $default_company;
      print OUT "/*\n";
	print OUT "$lead$tag0$trail\n";
	foreach $rl (@stdlines) {
	  my $l = $rl;
	  $l =~ s/\{RANGE\}/$rv/;
	  $l =~ s/\{COMPANY\}/$cv/;
	  print OUT "$lead$l$trail\n";
	}
	print OUT "$lead$tag1$trail\n";
      print OUT " */\n";
      while(<IN>)  {
	print OUT "$_";
      }
      close(IN);
      close(OUT);
    } else {
    }
    # other recipe detection can go here
  }
#  $found=0;
  if ($found) {
    unlink($file);
    open(IN, "<$tmp");
    open(OUT, ">$file");
    while(<IN>)  {
      print OUT "$_";
    }
    close(OUT);
    close(IN);
  }

  #unlink($tmp);

  return "standard" if $std;
  return "nonstandard" if $nonstd;
  return "fixed" if $fixed;
  return "missing";
}



# parse an old conforming copyright notice (without the tags, in one line)
# and return the range and company extracted, if possible.
sub parse_oldcr {
  my ($ocr) = @_;
# The pattern we are expecting is something like:
#   Copyright 1997-2001 Defense Advanced Research Projects
#   Agency (DARPA) and ALPINE (a BBN Technologies (BBN) and
#   Raytheon Systems Company (RSC) Consortium).
#   This software to be used only in accordance with the
#   COUGAAR licence agreement.
#
# We'll attempt to extract RANGE = 1997-2001, and we'll assume that if we
# see ALPINE in the body, we'll switch to use BBNT to cover the
# shift from Alpine to BBN ownership under Ultra*Log
  my ($r0, $r1) = (0,0);
  my ($company);
  if ($ocr=~/Copyright\s*([0-9]{4})(\s*-\s*([0-9]{4}))?\s*([^.]*)\s*\./i) {
    if ($1) {
      $r0 = $1;
      $r1 = $3 if ($3);
    }
    if ($4) {
      $company = $4;
    }
  }

  # reformat range
  my ($range);
  $r1 = $yyyy;
  $r0 = $yyyy if ($r0 == 0);
  if ($r1 == $r0) {
    $range = $yyyy;
  } else {
    $range = "$r0-$r1";
  }

  #figure out company
  if ($company) {
    if ($company=~/ALPINE/ && $company=~/BBN/) {
      $company = $bbn_company;
    }

    $company = $1 if ($company=~/(.*) under sponsorship/);
  } else {
    $company = $default_company;
  }

  return ($range, $company);
}
