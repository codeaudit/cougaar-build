#!/usr/bin/perl
# -*- Perl -*-

# <copyright>
#  Copyright 2001 BBNT Solutions, LLC
#  under sponsorship of the Defense Advanced Research Projects Agency (DARPA).
# 
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the Cougaar Open Source License as published by
#  DARPA on the Cougaar Open Source Website (www.cougaar.org).
# 
#  THE COUGAAR SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS
#  PROVIDED 'AS IS' WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR
#  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT
#  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT
#  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL
#  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS,
#  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
#  PERFORMANCE OF THE COUGAAR SOFTWARE.
# </copyright>


use Cwd;
use File::Copy;
use File::Path;
use File::Find;

require "getopts.pl";
&Getopts('qvnhxips:d:fl:');

$pretend = 0;
$verbose = 1;
#$alphome = "/home/mthome/alp/src";
#$destdir = "/home/mthome/lib/classes";
$alphome = $ENV{COUGAARHOME} if $ENV{COUGAARHOME};
$destdir = $ENV{COUGAARCLASSES} if $ENV{COUGAARCLASSES};
$compile_in_place = 0;
$use_classpath = 1;
$compile_experimentals = 0;

$use_javac = 1;
#$javac_command = "javac -J-mx64m -g -deprecation";
$javac_command = "javac -g -J-mx64m";

if ($opt_h) {
  print STDERR "Usage: alpc [-qvnxpfh] [-s src] [-d dst] [src dst]
\t-q\tBe as quiet as possible - only show errors.
\t-v\tBe as verbose as possible - even show commands executed.
\t-n\tDon't actually compile anything - just show what would happen
\t\t\t(Implies -v).
\t-x\tAlso (try) to compile experimental code.
\t-p\tCompile in-place.
\t-f\tForce use of standard javac.
\t-h\tShow this help message.
\t-s src\tSpecify the source directory.
\t-d dst\tSpecify the destination directory.
\t-l lib\tSpecify the lib directory (supporting jar files).
\tsrc dst\tSpecify both src and dst.
Environment variables:
\tJAVAC_COMMAND specifies program and args for javac
\t\t(e.g. \"jikes -g\" to use IBM's jikes compiler).  -f flag
\t\toverrides this evar.
\tCOUGAARHOME specifies default source directory.
\tALPLIBS specifies COUGAAR lib directory (defaults to home/alp/lib).
\tCOUGAARCLASSES specifies default destination directory.
If no destination directory is specified, -p flag is implied.
";
  exit 1;
}

$verbose = 0 if $opt_q;
$verbose = 2 if $opt_v;
if ($opt_n) {
  $pretend = 1;
  $verbose = 2;
}
$compile_experimentals = 1 if $opt_x;
$compile_in_place = 1 if $opt_p;

$compile_command = $ENV{JAVAC_COMMAND};
if ($opt_f || ! $compile_command ) {
  $compile_command= $javac_command;
} 

$alphome = $opt_s if $opt_s;
$destdir = $opt_d if $opt_d;
$libdir = $opt_l if $opt_l;

$tmpcount=1;

@ARGV = reverse @ARGV;
$alphome = pop(@ARGV) if ($#ARGV >= 0);
$destdir = pop(@ARGV) if ($#ARGV >= 0);

$java_command = "/usr/java/jdk/bin/java";

if (! $alphome) {
  $alphome = $ENV{HOME};
  $alphome = "$alphome/alp/core/src";
  print STDERR "Warning: No alp sources specified - using \"$alphome\"\n";
}

if (! $destdir) {
  $destdir = $alphome;
  $compile_in_place = 1;
  # print STDERR "Warning: Defaulting to in-place compile\n" if ($verbose);
}

if (! $libdir) {
  $libdir = "$alphome/../lib";
}

# deal with relative directories
if (! ($alphome =~ /^\//)) {
  $cwd = cwd();
  $alphome = "$cwd/$alphome";
}
# drop a trailing '/'
if (($alphome =~ /\/$/)) {
  chop $alphome;
}

if ($verbose >1) {
  print STDERR "ALPC compiling $alphome into $destdir\n";
}

sub sighandler {
  local ($sig) = @_;
  print "Caught a SIG$sig -- exiting\n";
  exit(0);
}

$SIG{INT} = 'sighandler';
$SIG{QUIT} = 'sighandler';

chdir($alphome);
$homel = (length($alphome) +1);

# prune directories
%prunes;

# experimental directories (takes precedence over prune when -x)
%experimentals;

@dirs = finddirs($alphome);

$augmented_classpath;

# below also had $alphome
if ($compile_in_place) {
  $augmented_classpath = "$libdir:$ENV{CLASSPATH}";
  $destdir = $alphome;
} else {
  $augmented_classpath = "$destdir:$ENV{CLASSPATH}";
}

# hack for jikes until it is Java2 complient
if ( $compile_command =~ /jikes/ ) {
  if ( $java_command =~ /(.*)\/bin\/java/ ) {
    $javahome = $1;
    $rtjar = "$javahome/jre/lib/rt.jar";
    $augmented_classpath = "$augmented_classpath:$rtjar";
  }
}

# make sure we can find java source files for forward reference
$augmented_classpath = ".:$augmented_classpath";

$ENV{CLASSPATH} = $augmented_classpath;
print STDERR "CLASSPATH set to '$augmented_classpath'\n" if ($verbose>1);
$sawerror = 0;

# handle .def files
@defs = findbypattern($alphome, "\.def\$");
$n = $#defs+1;
#print STDERR "Found $n .def files\n" if $verbose;
for (@defs) {
  installfile($_);
  rundef($_);
}


# run the def file generator
sub rundef {
  local($path)=@_;
  open(DEF, "<$path");
  local($line);
  $line = <DEF>;
  local($rc)= -1;
  # if the first line is ";!generate: ..." then we'll use
  # it to build the def.
  if ( ($line =~ /\!generate:\s*(.*)$/) ) {
    $command = $1;	 
    # first word is the generator class
    @words = split /\s/, $command;
    
    # dirpath is the directory where the def file is
    @dirpath = split /\//, $path;
    pop @dirpath;
    $dirpath = join "/",@dirpath;

    # figure out the package name
    $class = $words[0];
    @pkgp = split /\./, $class;
    $pkgp = join "/",@pkgp;
    
    print STDERR "Running $class\n" if $verbose;
    $args = join " ", @words[1..$#words];
    chdir($dirpath);
    $rc = mysystem("java $class $args $path");
  }
  close(DEF);
  return $rc;
}



# compile all the java files
chdir($alphome);
@javas = findbypattern($alphome, "\.java\$");
$n = $#javas+1;
print STDERR "Compiling $n java files\n" if ($n && $verbose);
@javam;
for (@javas) {
  push @javam, (substr $_,  $homel);
}
$tmpf = dumptmp(@javam);
$rc = mysystem("$compile_command -d $destdir \@$tmpf");
unlink($tmpf);

@gifs = findbypattern($alphome, "\.(gif,jpg,png)\$");
$n = $#gifs+1;
print STDERR "Installing $n image files\n" if ($n && $verbose);
for (@gifs) {
  installfile($_);
}

@props = findbypattern($alphome, "\.(props)\$");
$n = $#props+1;
print STDERR "Installing $n props files\n" if ($n && $verbose);
for (@props) {
  installfile($_);
}

  
#  @gifs = glob("$path/*.gif");
#  if ($#gifs >= 0) {
#    print STDERR "Installing gifs in $destdir/$dir:\n" if $verbose;
#    if (! (-d "$destdir/$dir")) {
#      mysystem("mkdir -p $destdir/$dir");
#    }
#    $filelist = join(" ", @gifs);
#    mysystem("cp $filelist $destdir/$dir");
#  }

  
if ($verbose) {
  @classfiles = findbypattern($destdir, "\.class\$");
  $n = 1+ $#classfiles;
  print STDERR "\n$n Classfiles in $destdir\n";
}

if ($sawerror) {
  print STDERR "$sawerror compiles resulted in errors.\n";
}

sub skipP {
  local($_) = @_;
  
  $exp = 0;
  $skip = 0;

  if ( -f "$path/SKIP_COMPILE" ) {
    $exp = &isExperimental("$path/SKIP_COMPILE");
    $skip = !($exp);
  }
  if ( -f "$path/.SKIP_COMPILE" ) {
    $exp = &isExperimental("$path/.SKIP_COMPILE");
    $skip = !($exp);
  }

  if ($exp) {
    $experimentals{$path} = 1;
  }
  if ($skip) {
    $prunes{$path} = 1;
  }

  foreach $key (keys %prunes) {
    return "pruned" if (/^$key/);
  }

  if (! $compile_experimentals) {
    foreach $key (keys %experimentals) {
      return "experimental" if (/^$key/);
    }
  }

  return 0;
}

sub isExperimental {
  local($tagfile) = @_;

  open(EXP, "<$tagfile");
  local(@lines);
  @lines = <EXP>;
  close(EXP);
  return ( $lines[0] =~ /Experimental/i );
}

sub mysystem {
  local($command)= @_;

  print STDERR "$command\n" if ($verbose>1);
  if ($pretend) {
    return 0;
  }

  if ($pid = fork ) {
    # parent
    waitpid $pid, 0;
    local($rc)= $?;
    # signal decoding from Perl5 manual
    $rc &= 0xffff;
    if ($rc != 0) {
      $sawerror++;
      if ($rc == 0xff00) {
	print STDERR "Command failed: $!\n";
      } elsif ($rc > 0x80) {
	$rc >>= 8;
	print STDERR "Completed with exit status of $rc\n";
      } else {
	print STDERR "Ran with ";
	if ($rc &  0x80) {
	  $rc &= 0x80;
	  print STDERR "coredump from ";
	}
	print STDERR "signal $rc\n";
      }
    }
  } elsif (defined $pid) {
    # child
    exec $command;
    print STDERR "$command: $!\n";
    exit(-1);
  } else {
    die "Couldn't run @_\n";
  }
}

sub findbypattern {
  local($dir, $pat) = @_;
  local(@stuff);
  local($code)= sub { 
    if (/^CVS$/) {
      $File::Find::prune = 1;
      return;
    }
    (($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_));
    if (-d $_) {
      if (skipP($_)) {
	$File::Find::prune = 1;
	return;
      }
    } else {
      if (-f $_ && /$pat/) {
	push @stuff, $File::Find::name;
      }
    }
  };
  local(%ref);
  $ref{"wanted"}=$code;
  &find(\%ref, $dir);
  @stuff;
}

sub finddirs {
  local($dir) = @_;
  local(@stuff);
  local($code)= sub { 
    if (/^CVS$/) {
      $File::Find::prune = 1;
    } else {
      if ((($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_)) && -d $_ ) {
	push @stuff, $File::Find::name 	if (!&skipP($File::Find::name));
      }
    }
  };
  local(%ref);
  $ref{"wanted"}=$code;
  &find(\%ref, $dir);
  @stuff;
}

sub dumptmp {
  local(@lines) = @_;
  local($file) = "/tmp/alpc$$.$tmpcount";
  $tmpcount++;
  open FILE, ">$file" or die "Could not open $file for output";
  foreach $line (@lines) {
    print FILE "$line\n";
  }
  close FILE;
  $file;
}
    
sub installfile {
  local($path)=@_;
  # install the def file 
  local($f) = substr $path,  $homel;
  local($r) = rindex $f, "/";
  if ($r >= 0) {
    local($d) = substr $f,0,$r;
    mkpath("$destdir/$d");
  }
  copy($path,"$destdir/$f") || print STDERR "Failed to install $path to $destdir/$f\n";
}  
