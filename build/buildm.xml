<project name="module" default="dist">

<!-- 
Baseline ANT module build recipe
 Requires the following minimum settings:
 	codegen.jar		a classpath with build.jar (for .def processing)
	module.name		name of this module (e.g. "core")
	basedir			base directory of the module

 optional:
	project.classlib	classpath will be augmented by any
				jarfiles found in this directory.
Other tricks:
	-Dclassdir=<foo> with the compile target to compile to some
common classpath location.  I sometimes do -Dclassdir=$HOME/lib/classes 
to compile everything into my very own development directory.

	-Dclassdir=.../src will compile in-place
-->

<!--
	The following are cougaar ANT extensions which require that antex
	be compiled and installed into the ant lib directory as cougaar.jar
-->
<taskdef name="pathproperty" classname="org.cougaar.tools.ant.PathProperty"/>
<taskdef name="trycall" classname="org.cougaar.tools.ant.TryCall"/>
<taskdef name="foreach" classname="org.cougaar.tools.ant.Foreach"/>

<!-- set global properties from user's .ant.properties file -->
<property file="${user.home}/.ant.properties"/>

<!-- This is where jars may be found for the whole cougaar build -->
<property name="project.classlib" value="${basedir}/dist/lib"/>
<!-- this may be set if build.jar is not in ${project.classlib} -->
<!--
<property name="codegen.jar" value="/home/mthome/lib/classes" />
-->

<property name="build.compile.debug" value="on" />

<!-- These are values you might want to set temporarily (with -D args)
or globally in your $HOME/.ant.properties.

<property name="build.compiler" value="jikes" />
<property name="build.compiler.emacs" value="on" /> 
<property name="build.compile.deprecation" value="on" />
<property name="build.compile.depend" value="on" />
-->

<!-- set global properties for this build -->

<!-- usually reset by the builder -->
<property name="module.name" value="module" />

<property name="src" value="${basedir}/src" />

<!-- tmp is a temporary directory for interim products. -->
<property name="mtmpdir" value="${basedir}/tmpdir" />

<!-- classdir is where we put compiled java files -->
<property name="classdir" value="${mtmpdir}/classes" />

<!-- docdir is where we put generated javadoc -->
<property name="docdir" value="${mtmpdir}/api" />

<!-- dist is where distributed products go -->
<property name="dist" value="${mtmpdir}/dist" />


<path id="jars">
  <fileset dir="${project.classlib}">
    <include name="*.jar"/>
  </fileset>
  <pathelement path="${java.class.path}"/>
</path>


<target name="init">
  <tstamp/>
  <available property="hasBuildProps" file="${basedir}/src/build.properties"/>
  <available property="hasDoc" file="${basedir}/doc"/>
  <available property="hasExamples" file="${basedir}/examples"/>
  <available property="hasTest" file="${basedir}/test"/>
</target>

<target name="main.compile">
  <antcall target="build">
	<param name="build.srcdir" value="${src}"/>
	<param name="build.destdir" value="${classdir}" />
  </antcall>
</target>

<target name="main.jar" depends="main.compile">
  <antcall target="build">
	<param name="build.srcdir" value="${src}"/>
	<param name="build.destdir" value="${classdir}" />
  </antcall>
</target>

<target name="examples" if="hasExamples" depends="init">
  <antcall target="examples.compile"/>
</target>

<target name="examples.compile" depends="main.compile">
  <antcall target="build">
	<param name="build.srcdir" value="${basedir}/examples"/>
	<param name="build.destdir" value="${mtmpdir}/examples" />
  </antcall>
</target>

<target name="test" if="hasTest" depends="init">
  <antcall target="test.compile"/>
  <!-- invoke junit -->

</target>

<target name="test.compile" depends="main.compile">
  <antcall target="build">
	<param name="build.srcdir" value="${basedir}/test"/>
	<param name="build.destdir" value="${mtmpdir}/test" />
  </antcall>
</target>

<target name="doc" depends="init">
  <antcall target="doc.warn"/>
  <antcall target="doc.real"/>
</target>

<target name="doc.warn" depends="init" unless="hasBuildProps">
  <echo message="Doc target requires ${basedir}/src/build.properties"/>
</target>

<target name="doc.real" depends="init" if="hasBuildProps">
  <mkdir dir="${docdir}" />
  <!-- ${src}/build.properties must define doc.packages to be
something like org.cougaar.tools.build.* (e.g. for the build module) -->
  <property file="${src}/build.properties"/>
  <javadoc
	sourcepath="${src}"
	destdir="${docdir}"
	packagenames="${doc.packages}"
	 />
</target>

<target name="compile" depends="init">
  <antcall target="main.compile"/>
</target>

<target name="dist" depends="init,compile,examples,test,doc">
  <!-- Create the module distribution and put it in ${dist}.
Products required:
	${dist}/lib/${module.name}.jar
	${dist}/${module.name}/src.jar
	${dist}/${module.name}/examples.jar
	${dist}/${module.name}/test.jar
	${dist}/${module.name}/doc/*
	${dist}/${module.name}/api/*
	${dist}/${module.name}/bin/*
	${dist}/${module.name}/data/*
	-->

  <property name="mod" value="${dist}/${module.name}"/>

  <mkdir dir="${dist}/lib"/>
  <mkdir dir="${mod}"/>

  <!-- ${dist}/lib/${module.name}.jar -->
  <antcall target="jar">
    <param name="jar.jarfile" value="${dist}/lib/${module.name}.jar"/>
    <param name="jar.basedir" value="${classdir}"/>
    <param name="jar.srcdir" value="${src}"/>
  </antcall>

  <!-- ${mod}/src.jar -->
  <antcall target="jarsources">
    <param name="jar.jarfile" value="${mod}/src.jar"/>
    <param name="jar.basedir" value="${src}"/>
  </antcall>

  <!-- ${mod}/examples.jar -->
  <antcall target="jarsources">
    <param name="jar.jarfile" value="${mod}/examples.jar"/>
    <param name="jar.basedir" value="${basedir}/examples"/>
  </antcall>

  <!-- ${mod}/test.jar -->
  <antcall target="jarsources">
    <param name="jar.jarfile" value="${mod}/test.jar"/>
    <param name="jar.basedir" value="${basedir}/test"/>
  </antcall>

  <!-- copy doc -->
  <antcall target="copydir">
    <param name="dirname" value="doc"/>
  </antcall>

  <!-- copy api -->
  <antcall target="copydir">
    <param name="dirname" value="api"/>
  </antcall>

  <!-- copy bin -->
  <antcall target="copydir">
    <param name="dirname" value="bin"/>
  </antcall>

  <!-- copy data -->
  <antcall target="copydir">
    <param name="dirname" value="data"/>
  </antcall>

  <!-- copy configs -->
  <antcall target="copydir">
    <param name="dirname" value="configs"/>
  </antcall>
</target>

<target name="copydir">
  <available property="hazit" file="${basedir}/${dirname}"/>
  <antcall target="copydir1">
    <param name="todir" value="${mod}/${dirname}"/>
    <param name="fromdir" value="${basedir}/${dirname}"/>
  </antcall>
</target>

<target name="copydir1" if="hazit">
  <echo message="Copying from ${fromdir} to ${todir}"/>
  <mkdir dir="${todir}"/>
  <copy todir="${todir}" >
    <fileset dir="${fromdir}">
        <include name="**/*"/>
    </fileset>

  </copy>
</target>

<target name="clean">
  <!-- Delete the ${mtmpdir} and ${dist} directory trees -->
  <delete dir="${mtmpdir}" />
  <delete dir="${dist}" />
</target>

<!-- fancy jarfile handling.  Call "jar" target with:
	jar.jarfile=	destination jar file
	jar.basedir=	directory to jar up
	jar.srcdir=	defining src tree.  Used to decide if it
			should use an included manifest.mf.
-->
<target name="jar">
  <property name="jar.target" value="jar.simple"/>
  <property name="jar.manifest" value="${jar.srcdir}/manifest.mf"/>
  <available property="jar.target" value="jar.fancy" file="${jar.manifest}"/>
  <antcall target="${jar.target}" />
</target>
<target name="jar.simple">
  <echo message="jar cf ${jar.jarfile} ${jar.basedir}"/>
  <jar jarfile="${jar.jarfile}" basedir="${jar.basedir}" />
</target>
<target name="jar.fancy">
  <echo message="jar cfm ${jar.jarfile} ${jar.manifest} ${jar.basedir}"/>
  <jar jarfile="${jar.jarfile}" basedir="${jar.basedir}" manifest="${jar.manifest}" />
</target>

<target name="jarsources" unless="noSources">
  <trycall target="jarsources1"/>
</target>

<target name="jarsources1">
  <antcall target="jar.simple"/>
</target>


<!-- fancy build target handling.  requires:
	build.srcdir=	head of source tree
	build.destdir=	destdir for class files
  If srcdir doesn't exist, then this target will still succeed.
-->

<target name="build">
  <property name="build.target" value="build.empty"/>
  <available property="build.target" value="build.real" file="${build.srcdir}"/>
  <antcall target="${build.target}"/>
</target>
<target name="build.empty">
  <echo message="No ${build.srcdir}"/>
</target>
<target name="build.real" depends="defrunner">
  <echo message="building ${build.srcdir}"/>
  <mkdir dir="${build.destdir}"/>
  <javac srcdir="${build.srcdir}"
	destdir="${build.destdir}" 
	depend="${build.compile.depend}"
	deprecation="${build.compile.deprecation}"
	debug="${build.compile.debug}"
    >
    <classpath>
      <pathelement path="${java.class.path}"/>
      <fileset dir="${project.classlib}">
        <include name="*.jar"/>
      </fileset>
    </classpath>
  </javac>

  <echo message="copying def/images from ${build.srcdir} to ${build.destdir}..."/>
  <!-- copy various files directly from source into the lib tree for jarring -->
  <copy todir="${build.destdir}" >
    <fileset dir="${build.srcdir}" >
	<include name="**/*.def"/>
	<include name="**/*.props"/>
	<include name="**/*.gif"/>
	<include name="**/*.jpg"/>
	<include name="**/*.png"/>
    </fileset>
  </copy>

</target>

<target name="defrunner">

  <pathproperty name="codegen.path">
    <path>
     <pathelement path="${codegen.jar}"/>
     <path refid="jars"/>
    </path>
  </pathproperty>

  <execon executable="java"
	parallel="false"
	failonerror="false" >
	<arg line="-classpath ${codegen.path} org.cougaar.tools.build.DefRunner" />
	<fileset dir="${build.srcdir}" >
		<include name="**/*.def" />
	</fileset>
  </execon>
</target>

<!-- fancy dist target
	dist.classdir	source of classes
	dist.srcdir	source directory
	dist.destdir	target directory

jars up $classdir and puts it in $destdir/lib/${dist.target}.jar
jars up source.
-->

<target name="_dist">
  <!-- Create the ${dist.dest} directory (if not already there> -->
  <mkdir dir="${dist.dest}" />

  <antcall target="jar">
    <param name="jar.jarfile" value="${dist.dest}/${module.name}.jar"/>
    <param name="jar.basedir" value="${classdir}"/>
    <param name="jar.srcdir" value="${src}"/>
  </antcall>
</target>


</project>
